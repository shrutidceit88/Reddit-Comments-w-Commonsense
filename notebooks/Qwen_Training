{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bb5e9bc6",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-09-01T02:46:36.315660Z",
     "iopub.status.busy": "2025-09-01T02:46:36.315437Z",
     "iopub.status.idle": "2025-09-01T02:46:38.433257Z",
     "shell.execute_reply": "2025-09-01T02:46:38.432376Z"
    },
    "papermill": {
     "duration": 2.128404,
     "end_time": "2025-09-01T02:46:38.434570",
     "exception": false,
     "start_time": "2025-09-01T02:46:36.306166",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/jigsaw-agile-community-rules/sample_submission.csv\n",
      "/kaggle/input/jigsaw-agile-community-rules/train.csv\n",
      "/kaggle/input/jigsaw-agile-community-rules/test.csv\n",
      "/kaggle/input/qwen2-5-0-5b-instruct/__huggingface_repos__.json\n",
      "/kaggle/input/qwen2-5-0-5b-instruct/Qwen3-1.7B/model.safetensors.index.json\n",
      "/kaggle/input/qwen2-5-0-5b-instruct/Qwen3-1.7B/config.json\n",
      "/kaggle/input/qwen2-5-0-5b-instruct/Qwen3-1.7B/merges.txt\n",
      "/kaggle/input/qwen2-5-0-5b-instruct/Qwen3-1.7B/model-00001-of-00002.safetensors\n",
      "/kaggle/input/qwen2-5-0-5b-instruct/Qwen3-1.7B/LICENSE\n",
      "/kaggle/input/qwen2-5-0-5b-instruct/Qwen3-1.7B/model-00002-of-00002.safetensors\n",
      "/kaggle/input/qwen2-5-0-5b-instruct/Qwen3-1.7B/README.md\n",
      "/kaggle/input/qwen2-5-0-5b-instruct/Qwen3-1.7B/tokenizer.json\n",
      "/kaggle/input/qwen2-5-0-5b-instruct/Qwen3-1.7B/vocab.json\n",
      "/kaggle/input/qwen2-5-0-5b-instruct/Qwen3-1.7B/tokenizer_config.json\n",
      "/kaggle/input/qwen2-5-0-5b-instruct/Qwen3-1.7B/.gitattributes\n",
      "/kaggle/input/qwen2-5-0-5b-instruct/Qwen3-1.7B/generation_config.json\n",
      "/kaggle/input/qwen2-5-0-5b-instruct/Qwen3-1.7B/.cache/huggingface/.gitignore\n",
      "/kaggle/input/qwen2-5-0-5b-instruct/Qwen3-1.7B/.cache/huggingface/download/tokenizer_config.json.lock\n",
      "/kaggle/input/qwen2-5-0-5b-instruct/Qwen3-1.7B/.cache/huggingface/download/LICENSE.lock\n",
      "/kaggle/input/qwen2-5-0-5b-instruct/Qwen3-1.7B/.cache/huggingface/download/merges.txt.metadata\n",
      "/kaggle/input/qwen2-5-0-5b-instruct/Qwen3-1.7B/.cache/huggingface/download/tokenizer.json.metadata\n",
      "/kaggle/input/qwen2-5-0-5b-instruct/Qwen3-1.7B/.cache/huggingface/download/model.safetensors.index.json.metadata\n",
      "/kaggle/input/qwen2-5-0-5b-instruct/Qwen3-1.7B/.cache/huggingface/download/tokenizer.json.lock\n",
      "/kaggle/input/qwen2-5-0-5b-instruct/Qwen3-1.7B/.cache/huggingface/download/model.safetensors.index.json.lock\n",
      "/kaggle/input/qwen2-5-0-5b-instruct/Qwen3-1.7B/.cache/huggingface/download/tokenizer_config.json.metadata\n",
      "/kaggle/input/qwen2-5-0-5b-instruct/Qwen3-1.7B/.cache/huggingface/download/.gitattributes.lock\n",
      "/kaggle/input/qwen2-5-0-5b-instruct/Qwen3-1.7B/.cache/huggingface/download/merges.txt.lock\n",
      "/kaggle/input/qwen2-5-0-5b-instruct/Qwen3-1.7B/.cache/huggingface/download/config.json.metadata\n",
      "/kaggle/input/qwen2-5-0-5b-instruct/Qwen3-1.7B/.cache/huggingface/download/model-00001-of-00002.safetensors.metadata\n",
      "/kaggle/input/qwen2-5-0-5b-instruct/Qwen3-1.7B/.cache/huggingface/download/generation_config.json.metadata\n",
      "/kaggle/input/qwen2-5-0-5b-instruct/Qwen3-1.7B/.cache/huggingface/download/vocab.json.lock\n",
      "/kaggle/input/qwen2-5-0-5b-instruct/Qwen3-1.7B/.cache/huggingface/download/.gitattributes.metadata\n",
      "/kaggle/input/qwen2-5-0-5b-instruct/Qwen3-1.7B/.cache/huggingface/download/model-00001-of-00002.safetensors.lock\n",
      "/kaggle/input/qwen2-5-0-5b-instruct/Qwen3-1.7B/.cache/huggingface/download/model-00002-of-00002.safetensors.metadata\n",
      "/kaggle/input/qwen2-5-0-5b-instruct/Qwen3-1.7B/.cache/huggingface/download/generation_config.json.lock\n",
      "/kaggle/input/qwen2-5-0-5b-instruct/Qwen3-1.7B/.cache/huggingface/download/vocab.json.metadata\n",
      "/kaggle/input/qwen2-5-0-5b-instruct/Qwen3-1.7B/.cache/huggingface/download/config.json.lock\n",
      "/kaggle/input/qwen2-5-0-5b-instruct/Qwen3-1.7B/.cache/huggingface/download/LICENSE.metadata\n",
      "/kaggle/input/qwen2-5-0-5b-instruct/Qwen3-1.7B/.cache/huggingface/download/README.md.metadata\n",
      "/kaggle/input/qwen2-5-0-5b-instruct/Qwen3-1.7B/.cache/huggingface/download/README.md.lock\n",
      "/kaggle/input/qwen2-5-0-5b-instruct/Qwen3-1.7B/.cache/huggingface/download/model-00002-of-00002.safetensors.lock\n",
      "/kaggle/input/qwen2-7b-instruct-merged-v2/qwen2-7b-instruct-merged_v2/model.safetensors.index.json\n",
      "/kaggle/input/qwen2-7b-instruct-merged-v2/qwen2-7b-instruct-merged_v2/model-00003-of-00004.safetensors\n",
      "/kaggle/input/qwen2-7b-instruct-merged-v2/qwen2-7b-instruct-merged_v2/config.json\n",
      "/kaggle/input/qwen2-7b-instruct-merged-v2/qwen2-7b-instruct-merged_v2/merges.txt\n",
      "/kaggle/input/qwen2-7b-instruct-merged-v2/qwen2-7b-instruct-merged_v2/model-00001-of-00004.safetensors\n",
      "/kaggle/input/qwen2-7b-instruct-merged-v2/qwen2-7b-instruct-merged_v2/tokenizer.json\n",
      "/kaggle/input/qwen2-7b-instruct-merged-v2/qwen2-7b-instruct-merged_v2/vocab.json\n",
      "/kaggle/input/qwen2-7b-instruct-merged-v2/qwen2-7b-instruct-merged_v2/tokenizer_config.json\n",
      "/kaggle/input/qwen2-7b-instruct-merged-v2/qwen2-7b-instruct-merged_v2/chat_template.jinja\n",
      "/kaggle/input/qwen2-7b-instruct-merged-v2/qwen2-7b-instruct-merged_v2/model-00004-of-00004.safetensors\n",
      "/kaggle/input/qwen2-7b-instruct-merged-v2/qwen2-7b-instruct-merged_v2/special_tokens_map.json\n",
      "/kaggle/input/qwen2-7b-instruct-merged-v2/qwen2-7b-instruct-merged_v2/model-00002-of-00004.safetensors\n",
      "/kaggle/input/qwen2-7b-instruct-merged-v2/qwen2-7b-instruct-merged_v2/added_tokens.json\n",
      "/kaggle/input/qwen2-7b-instruct-merged-v2/qwen2-7b-instruct-merged_v2/Modelfile\n",
      "/kaggle/input/qwen2-7b-instruct-merged-v2/qwen2-7b-instruct-merged_v2/generation_config.json\n",
      "/kaggle/input/qwen2-5-0-5b/config.json\n",
      "/kaggle/input/qwen2-5-0-5b/merges.txt\n",
      "/kaggle/input/qwen2-5-0-5b/LICENSE\n",
      "/kaggle/input/qwen2-5-0-5b/README.md\n",
      "/kaggle/input/qwen2-5-0-5b/tokenizer.json\n",
      "/kaggle/input/qwen2-5-0-5b/vocab.json\n",
      "/kaggle/input/qwen2-5-0-5b/tokenizer_config.json\n",
      "/kaggle/input/qwen2-5-0-5b/model.safetensors\n",
      "/kaggle/input/qwen2-5-0-5b/.gitattributes\n",
      "/kaggle/input/qwen2-5-0-5b/generation_config.json\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/finetune.py\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/__huggingface_repos__.json\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/requirements.txt\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/outputs/README.md\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/outputs/runs/Jul31_16-45-02_55092aac9317/events.out.tfevents.1753980309.55092aac9317.383.0\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/outputs/runs/Jul31_15-39-22_55092aac9317/events.out.tfevents.1753976368.55092aac9317.105.0\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/outputs/checkpoint-500/adapter_model.safetensors\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/outputs/checkpoint-500/merges.txt\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/outputs/checkpoint-500/trainer_state.json\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/outputs/checkpoint-500/training_args.bin\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/outputs/checkpoint-500/adapter_config.json\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/outputs/checkpoint-500/README.md\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/outputs/checkpoint-500/tokenizer.json\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/outputs/checkpoint-500/vocab.json\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/outputs/checkpoint-500/tokenizer_config.json\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/outputs/checkpoint-500/scaler.pt\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/outputs/checkpoint-500/chat_template.jinja\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/outputs/checkpoint-500/scheduler.pt\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/outputs/checkpoint-500/special_tokens_map.json\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/outputs/checkpoint-500/optimizer.pt\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/outputs/checkpoint-500/rng_state.pth\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/outputs/checkpoint-500/added_tokens.json\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/outputs/checkpoint-993/adapter_model.safetensors\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/outputs/checkpoint-993/merges.txt\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/outputs/checkpoint-993/trainer_state.json\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/outputs/checkpoint-993/training_args.bin\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/outputs/checkpoint-993/adapter_config.json\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/outputs/checkpoint-993/README.md\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/outputs/checkpoint-993/tokenizer.json\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/outputs/checkpoint-993/vocab.json\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/outputs/checkpoint-993/tokenizer_config.json\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/outputs/checkpoint-993/scaler.pt\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/outputs/checkpoint-993/chat_template.jinja\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/outputs/checkpoint-993/scheduler.pt\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/outputs/checkpoint-993/special_tokens_map.json\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/outputs/checkpoint-993/optimizer.pt\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/outputs/checkpoint-993/rng_state.pth\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/outputs/checkpoint-993/added_tokens.json\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/Qwen2.5-Coder-0.5B-Base-Chat-LeetCode/adapter_model.safetensors\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/Qwen2.5-Coder-0.5B-Base-Chat-LeetCode/merges.txt\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/Qwen2.5-Coder-0.5B-Base-Chat-LeetCode/adapter_config.json\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/Qwen2.5-Coder-0.5B-Base-Chat-LeetCode/README.md\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/Qwen2.5-Coder-0.5B-Base-Chat-LeetCode/tokenizer.json\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/Qwen2.5-Coder-0.5B-Base-Chat-LeetCode/vocab.json\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/Qwen2.5-Coder-0.5B-Base-Chat-LeetCode/tokenizer_config.json\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/Qwen2.5-Coder-0.5B-Base-Chat-LeetCode/chat_template.jinja\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/Qwen2.5-Coder-0.5B-Base-Chat-LeetCode/special_tokens_map.json\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/Qwen2.5-Coder-0.5B-Base-Chat-LeetCode/added_tokens.json\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/Qwen2.5-Coder-0.5B-Base-Sequence-LeetCode/adapter_model.safetensors\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/Qwen2.5-Coder-0.5B-Base-Sequence-LeetCode/merges.txt\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/Qwen2.5-Coder-0.5B-Base-Sequence-LeetCode/adapter_config.json\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/Qwen2.5-Coder-0.5B-Base-Sequence-LeetCode/README.md\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/Qwen2.5-Coder-0.5B-Base-Sequence-LeetCode/tokenizer.json\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/Qwen2.5-Coder-0.5B-Base-Sequence-LeetCode/vocab.json\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/Qwen2.5-Coder-0.5B-Base-Sequence-LeetCode/tokenizer_config.json\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/Qwen2.5-Coder-0.5B-Base-Sequence-LeetCode/special_tokens_map.json\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/Qwen2.5-Coder-0.5B-Base-Sequence-LeetCode/added_tokens.json\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/unsloth_compiled_cache/UnslothCPOTrainer.py\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/unsloth_compiled_cache/UnslothXPOTrainer.py\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/unsloth_compiled_cache/UnslothAlignPropTrainer.py\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/unsloth_compiled_cache/UnslothKTOTrainer.py\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/unsloth_compiled_cache/UnslothOnlineDPOTrainer.py\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/unsloth_compiled_cache/UnslothPPOTrainer.py\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/unsloth_compiled_cache/UnslothGKDTrainer.py\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/unsloth_compiled_cache/UnslothRLOOTrainer.py\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/unsloth_compiled_cache/UnslothSFTTrainer.py\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/unsloth_compiled_cache/UnslothORPOTrainer.py\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/unsloth_compiled_cache/UnslothGRPOTrainer.py\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/unsloth_compiled_cache/UnslothDPOTrainer.py\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/unsloth_compiled_cache/UnslothBCOTrainer.py\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/unsloth_compiled_cache/UnslothRewardTrainer.py\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/unsloth_compiled_cache/UnslothPRMTrainer.py\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/unsloth_compiled_cache/UnslothIterativeSFTTrainer.py\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/unsloth_compiled_cache/UnslothDDPOTrainer.py\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/unsloth_compiled_cache/UnslothNashMDTrainer.py\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/wandb/run-20250731_153856-hw5zv8tr/run-hw5zv8tr.wandb\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/wandb/run-20250731_153856-hw5zv8tr/logs/debug.log\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/wandb/run-20250731_153856-hw5zv8tr/logs/debug-internal.log\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/wandb/run-20250731_153856-hw5zv8tr/files/wandb-summary.json\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/wandb/run-20250731_153856-hw5zv8tr/files/config.yaml\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/wandb/run-20250731_153856-hw5zv8tr/files/output.log\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/wandb/run-20250731_153856-hw5zv8tr/files/requirements.txt\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/wandb/run-20250731_153856-hw5zv8tr/files/wandb-metadata.json\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/wandb/run-20250731_164447-m41n1c6s/run-m41n1c6s.wandb\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/wandb/run-20250731_164447-m41n1c6s/logs/debug.log\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/wandb/run-20250731_164447-m41n1c6s/logs/debug-internal.log\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/wandb/run-20250731_164447-m41n1c6s/files/wandb-summary.json\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/wandb/run-20250731_164447-m41n1c6s/files/config.yaml\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/wandb/run-20250731_164447-m41n1c6s/files/output.log\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/wandb/run-20250731_164447-m41n1c6s/files/requirements.txt\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/wandb/run-20250731_164447-m41n1c6s/files/wandb-metadata.json\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/huggingface_tokenizers_cache/.locks/models--unsloth--qwen2.5-coder-0.5b-bnb-4bit/31349551d90c7606f325fe0f11bbb8bd5fa0d7c7.lock\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/huggingface_tokenizers_cache/.locks/models--unsloth--qwen2.5-coder-0.5b-bnb-4bit/c8dd4c904ea9bfc3cbaaa50075c13a9a1dab52c9.lock\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/huggingface_tokenizers_cache/.locks/models--unsloth--qwen2.5-coder-0.5b-bnb-4bit/4783fe10ac3adce15ac8f358ef5462739852c569.lock\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/huggingface_tokenizers_cache/.locks/models--unsloth--qwen2.5-coder-0.5b-bnb-4bit/630e242dd9b9ba3ac98f68aecd23f65ec95efa7e.lock\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/huggingface_tokenizers_cache/.locks/models--unsloth--qwen2.5-coder-0.5b-bnb-4bit/c2aa2851ea30d00c2c99a92741925741fb894100.lock\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/huggingface_tokenizers_cache/.locks/models--unsloth--qwen2.5-coder-0.5b-bnb-4bit/2f2f7ed8cf1b5a91f2bbb383cb767e679c0a6aed.lock\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/huggingface_tokenizers_cache/models--unsloth--qwen2.5-coder-0.5b-bnb-4bit/refs/main\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/huggingface_tokenizers_cache/models--unsloth--qwen2.5-coder-0.5b-bnb-4bit/blobs/31349551d90c7606f325fe0f11bbb8bd5fa0d7c7\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/huggingface_tokenizers_cache/models--unsloth--qwen2.5-coder-0.5b-bnb-4bit/blobs/630e242dd9b9ba3ac98f68aecd23f65ec95efa7e\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/huggingface_tokenizers_cache/models--unsloth--qwen2.5-coder-0.5b-bnb-4bit/blobs/c2aa2851ea30d00c2c99a92741925741fb894100\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/huggingface_tokenizers_cache/models--unsloth--qwen2.5-coder-0.5b-bnb-4bit/blobs/2f2f7ed8cf1b5a91f2bbb383cb767e679c0a6aed\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/huggingface_tokenizers_cache/models--unsloth--qwen2.5-coder-0.5b-bnb-4bit/blobs/c8dd4c904ea9bfc3cbaaa50075c13a9a1dab52c9\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/huggingface_tokenizers_cache/models--unsloth--qwen2.5-coder-0.5b-bnb-4bit/blobs/4783fe10ac3adce15ac8f358ef5462739852c569\n",
      "/kaggle/input/qwen2-5-coder-1-5b-base-sequence-lv2/huggingface_tokenizers_cache/models--unsloth--qwen2.5-coder-0.5b-bnb-4bit/.no_exist/6a59d74d1eaf2f3687e7caa03723f01ace6cdafb/chat_template.jinja\n"
     ]
    }
   ],
   "source": [
    "import numpy as np \n",
    "import pandas as pd \n",
    "import os\n",
    "\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "64fa15f8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-01T02:46:38.451767Z",
     "iopub.status.busy": "2025-09-01T02:46:38.451475Z",
     "iopub.status.idle": "2025-09-01T03:43:19.361901Z",
     "shell.execute_reply": "2025-09-01T03:43:19.360881Z"
    },
    "papermill": {
     "duration": 3400.920194,
     "end_time": "2025-09-01T03:43:19.363130",
     "exception": false,
     "start_time": "2025-09-01T02:46:38.442936",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m43.7/43.7 kB\u001b[0m \u001b[31m1.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m9.5/9.5 MB\u001b[0m \u001b[31m54.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m296.4/296.4 kB\u001b[0m \u001b[31m13.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.6/3.6 MB\u001b[0m \u001b[31m87.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m363.4/363.4 MB\u001b[0m \u001b[31m4.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.8/13.8 MB\u001b[0m \u001b[31m96.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m24.6/24.6 MB\u001b[0m \u001b[31m71.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m883.7/883.7 kB\u001b[0m \u001b[31m38.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m664.8/664.8 MB\u001b[0m \u001b[31m2.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m211.5/211.5 MB\u001b[0m \u001b[31m6.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.3/56.3 MB\u001b[0m \u001b[31m31.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m127.9/127.9 MB\u001b[0m \u001b[31m13.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m207.5/207.5 MB\u001b[0m \u001b[31m1.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.1/21.1 MB\u001b[0m \u001b[31m87.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-09-01 02:48:27.866823: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1756694908.221367      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1756694908.326343      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "2f14441882ac45b4b2ff38a3afee2a5c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "tokenizer_config.json: 0.00B [00:00, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "70b5417cbab44d1e8a2a4151ad8b7885",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "vocab.json: 0.00B [00:00, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "99f1e6d19e9c4f9096b2490845a62be8",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "merges.txt: 0.00B [00:00, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "940976c26efb456bbaf72dacb5d964a0",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "tokenizer.json: 0.00B [00:00, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== Fold 1/5 (LoRA=True) =====\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e28ed156f204415389226df6ed684a15",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "config.json:   0%|          | 0.00/681 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "a8a95b54fe864399a88170f64fb277f0",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "model.safetensors:   0%|          | 0.00/988M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Some weights of Qwen2ForSequenceClassification were not initialized from the model checkpoint at Qwen/Qwen2.5-0.5B and are newly initialized: ['score.weight']\n",
      "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/3 | train_loss=1.8350 | val_auc=0.7280\n",
      "Epoch 2/3 | train_loss=0.6084 | val_auc=0.7556\n",
      "Epoch 3/3 | train_loss=0.3534 | val_auc=0.7911\n",
      "Fold 1 AUC (best): 0.7911\n",
      "\n",
      "===== Fold 2/5 (LoRA=True) =====\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Some weights of Qwen2ForSequenceClassification were not initialized from the model checkpoint at Qwen/Qwen2.5-0.5B and are newly initialized: ['score.weight']\n",
      "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/3 | train_loss=1.9226 | val_auc=0.6764\n",
      "Epoch 2/3 | train_loss=0.5035 | val_auc=0.7863\n",
      "Epoch 3/3 | train_loss=0.2673 | val_auc=0.7968\n",
      "Fold 2 AUC (best): 0.7968\n",
      "\n",
      "===== Fold 3/5 (LoRA=True) =====\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Some weights of Qwen2ForSequenceClassification were not initialized from the model checkpoint at Qwen/Qwen2.5-0.5B and are newly initialized: ['score.weight']\n",
      "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/3 | train_loss=1.5929 | val_auc=0.7987\n",
      "Epoch 2/3 | train_loss=0.5777 | val_auc=0.8086\n",
      "Epoch 3/3 | train_loss=0.3537 | val_auc=0.8214\n",
      "Fold 3 AUC (best): 0.8214\n",
      "\n",
      "===== Fold 4/5 (LoRA=True) =====\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Some weights of Qwen2ForSequenceClassification were not initialized from the model checkpoint at Qwen/Qwen2.5-0.5B and are newly initialized: ['score.weight']\n",
      "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/3 | train_loss=1.9875 | val_auc=0.7335\n",
      "Epoch 2/3 | train_loss=0.7061 | val_auc=0.7708\n",
      "Epoch 3/3 | train_loss=0.3937 | val_auc=0.7840\n",
      "Fold 4 AUC (best): 0.7840\n",
      "\n",
      "===== Fold 5/5 (LoRA=True) =====\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Some weights of Qwen2ForSequenceClassification were not initialized from the model checkpoint at Qwen/Qwen2.5-0.5B and are newly initialized: ['score.weight']\n",
      "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/3 | train_loss=1.7758 | val_auc=0.7351\n",
      "Epoch 2/3 | train_loss=0.5744 | val_auc=0.7712\n",
      "Epoch 3/3 | train_loss=0.3677 | val_auc=0.7877\n",
      "Fold 5 AUC (best): 0.7877\n",
      "\n",
      "OOF AUC: 0.7950\n",
      "Saved folds under: /kaggle/working/qwen25_lora_pt\n"
     ]
    }
   ],
   "source": [
    "# ===== Qwen2.5-0.5B Cross-Encoder with Optional LoRA (Pure PyTorch, K-Fold) =====\n",
    "!pip -q install \"transformers==4.44.2\" \"peft==0.12.0\"\n",
    "\n",
    "import os, gc, math, warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "from sklearn.metrics import roc_auc_score\n",
    "\n",
    "import torch\n",
    "from torch import nn\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "from transformers import AutoTokenizer, AutoModelForSequenceClassification, get_cosine_schedule_with_warmup, set_seed\n",
    "from peft import LoraConfig, get_peft_model\n",
    "\n",
    "# ---------------- Config ----------------\n",
    "DATA_DIR   = \"/kaggle/input/jigsaw-agile-community-rules\"\n",
    "TRAIN_CSV  = f\"{DATA_DIR}/train.csv\"\n",
    "MODEL_ID   = \"Qwen/Qwen2.5-0.5B\"\n",
    "OUT_ROOT   = \"/kaggle/working/qwen25_lora_pt\"\n",
    "os.makedirs(OUT_ROOT, exist_ok=True)\n",
    "\n",
    "SEED=42; N_FOLDS=5\n",
    "MAX_LEN=256\n",
    "EPOCHS=3\n",
    "TRAIN_BS=8\n",
    "EVAL_BS=64\n",
    "GRAD_ACC=2\n",
    "LR=2e-4\n",
    "WARMUP_RATIO=0.05\n",
    "USE_LORA=True           # <<< toggle LoRA on/off\n",
    "HEAD_INIT=\"xavier\"      # [\"xavier\",\"kaiming\",\"none\"]\n",
    "CLASS_WEIGHT=True       # helpful if labels are imbalanced\n",
    "LABEL_SMOOTH=0.0        # set >0.0 for smoothing\n",
    "\n",
    "device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n",
    "torch.backends.cuda.matmul.allow_tf32 = True\n",
    "set_seed(SEED)\n",
    "\n",
    "# ---------------- Data prep ----------------\n",
    "def _clip(x):\n",
    "    x = \"\" if pd.isna(x) else str(x).strip()\n",
    "    return x if 0 < len(x) < 300 else \"\"\n",
    "\n",
    "def build_text_a(row):\n",
    "    sub  = str(row[\"subreddit\"])\n",
    "    rule = str(row[\"rule\"])\n",
    "    pos1 = _clip(row.get(\"positive_example_1\",\"\"))\n",
    "    neg1 = _clip(row.get(\"negative_example_1\",\"\"))\n",
    "    parts = [f\"r/{sub}\", f\"Rule: {rule}\"]\n",
    "    if pos1: parts.append(f\"Yes: {pos1}\")\n",
    "    if neg1: parts.append(f\"No: {neg1}\")\n",
    "    return \" | \".join(parts)\n",
    "\n",
    "def prepare_df(df):\n",
    "    df = df.copy()\n",
    "    df[\"text_a\"] = df.apply(build_text_a, axis=1)\n",
    "    df[\"text_b\"] = df[\"body\"].astype(str)\n",
    "    return df\n",
    "\n",
    "df = pd.read_csv(TRAIN_CSV)\n",
    "df = prepare_df(df)\n",
    "y  = df[\"rule_violation\"].astype(int).values\n",
    "\n",
    "# ---------------- Tokenizer ----------------\n",
    "tok = AutoTokenizer.from_pretrained(MODEL_ID, use_fast=True, trust_remote_code=True)\n",
    "if tok.pad_token is None:\n",
    "    if tok.eos_token is None:\n",
    "        tok.add_special_tokens({\"eos_token\":\"</s>\"})\n",
    "    tok.pad_token = tok.eos_token\n",
    "tok.padding_side = \"right\"\n",
    "\n",
    "# ---------------- Dataset / Collate ----------------\n",
    "class PairDataset(Dataset):\n",
    "    def __init__(self, df, labels=None):\n",
    "        self.a = df[\"text_a\"].tolist()\n",
    "        self.b = df[\"text_b\"].tolist()\n",
    "        self.labels = None if labels is None else labels.astype(np.int64)\n",
    "    def __len__(self): return len(self.a)\n",
    "    def __getitem__(self, i):\n",
    "        item = {\"a\": self.a[i], \"b\": self.b[i]}\n",
    "        if self.labels is not None:\n",
    "            item[\"labels\"] = int(self.labels[i])\n",
    "        return item\n",
    "\n",
    "def collate_fn(batch):\n",
    "    a_texts = [x[\"a\"] for x in batch]\n",
    "    b_texts = [x[\"b\"] for x in batch]\n",
    "    enc = tok(a_texts, b_texts, padding=True, truncation=True, max_length=MAX_LEN, return_tensors=\"pt\")\n",
    "    if \"labels\" in batch[0]:\n",
    "        labels = torch.tensor([x[\"labels\"] for x in batch], dtype=torch.long)\n",
    "        enc[\"labels\"] = labels\n",
    "    return enc\n",
    "\n",
    "# ---------------- Model builders ----------------\n",
    "def freshen_head(model, init=HEAD_INIT):\n",
    "    hidden = model.config.hidden_size\n",
    "    model.score = nn.Linear(hidden, 2)\n",
    "    if init == \"xavier\":\n",
    "        nn.init.xavier_uniform_(model.score.weight); nn.init.zeros_(model.score.bias)\n",
    "    elif init == \"kaiming\":\n",
    "        nn.init.kaiming_uniform_(model.score.weight, nonlinearity=\"linear\"); nn.init.zeros_(model.score.bias)\n",
    "    return model\n",
    "\n",
    "def build_model(use_lora=USE_LORA):\n",
    "    model = AutoModelForSequenceClassification.from_pretrained(\n",
    "        MODEL_ID,\n",
    "        num_labels=2,\n",
    "        trust_remote_code=True,\n",
    "        torch_dtype=torch.float32,         # keep FP32 to avoid dtype glitches\n",
    "    )\n",
    "    model.config.use_cache = False\n",
    "    model.config.pad_token_id = tok.pad_token_id\n",
    "    model.config.problem_type = \"single_label_classification\"\n",
    "\n",
    "    # keep embeddings in sync if we added eos/pad\n",
    "    if model.get_input_embeddings().num_embeddings != len(tok):\n",
    "        model.resize_token_embeddings(len(tok))\n",
    "\n",
    "    # (re)create classifier head so we always train a fresh layer\n",
    "    model = freshen_head(model)\n",
    "\n",
    "    if use_lora:\n",
    "        lcfg = LoraConfig(\n",
    "            r=16, lora_alpha=16, lora_dropout=0.05, bias=\"none\",\n",
    "            target_modules=[\"q_proj\",\"k_proj\",\"v_proj\",\"o_proj\",\"gate_proj\",\"up_proj\",\"down_proj\"],\n",
    "            task_type=\"SEQ_CLS\",\n",
    "        )\n",
    "        model = get_peft_model(model, lcfg)\n",
    "        # train LoRA + score; freeze others\n",
    "        for n, p in model.named_parameters():\n",
    "            if (\"lora_\" in n) or (\"score\" in n):\n",
    "                p.requires_grad = True\n",
    "            else:\n",
    "                p.requires_grad = False\n",
    "    else:\n",
    "        # head-only training\n",
    "        for n, p in model.named_parameters():\n",
    "            p.requires_grad = (\"score\" in n)\n",
    "    return model.to(device)\n",
    "\n",
    "# ---------------- Train/Eval loops ----------------\n",
    "def run_epoch(model, loader, optimizer, scheduler, loss_fct, grad_acc=GRAD_ACC):\n",
    "    model.train()\n",
    "    running = 0.0\n",
    "    optimizer.zero_grad(set_to_none=True)\n",
    "    for step, batch in enumerate(loader, 1):\n",
    "        batch = {k:v.to(device) for k,v in batch.items()}\n",
    "        labels = batch.pop(\"labels\")\n",
    "        outputs = model(**batch).logits  # [B,2]\n",
    "        loss = loss_fct(outputs, labels) / grad_acc\n",
    "        loss.backward()\n",
    "        if step % grad_acc == 0:\n",
    "            nn.utils.clip_grad_norm_(model.parameters(), 1.0)\n",
    "            optimizer.step()\n",
    "            scheduler.step()\n",
    "            optimizer.zero_grad(set_to_none=True)\n",
    "        running += loss.item() * grad_acc\n",
    "    return running / max(1, len(loader))\n",
    "\n",
    "@torch.no_grad()\n",
    "def evaluate(model, loader):\n",
    "    model.eval()\n",
    "    probs = []\n",
    "    labs  = []\n",
    "    for batch in loader:\n",
    "        batch = {k:v.to(device) for k,v in batch.items()}\n",
    "        labels = batch.pop(\"labels\")\n",
    "        logits = model(**batch).logits.float()\n",
    "        p1 = torch.softmax(torch.nan_to_num(logits, nan=0.0, posinf=1e4, neginf=-1e4), dim=1)[:,1]\n",
    "        probs.append(p1.cpu().numpy())\n",
    "        labs.append(labels.cpu().numpy())\n",
    "    probs = np.concatenate(probs)\n",
    "    labs  = np.concatenate(labs)\n",
    "    return roc_auc_score(labs, probs)\n",
    "\n",
    "# ---------------- K-Fold ----------------\n",
    "skf = StratifiedKFold(n_splits=N_FOLDS, shuffle=True, random_state=SEED)\n",
    "oof = np.zeros(len(df), dtype=float)\n",
    "\n",
    "for fold, (trn_idx, val_idx) in enumerate(skf.split(df, y), 1):\n",
    "    print(f\"\\n===== Fold {fold}/{N_FOLDS} (LoRA={USE_LORA}) =====\")\n",
    "    dtr = PairDataset(df.iloc[trn_idx], y[trn_idx])\n",
    "    dvl = PairDataset(df.iloc[val_idx], y[val_idx])\n",
    "\n",
    "    tr_loader = DataLoader(dtr, batch_size=TRAIN_BS, shuffle=True,  num_workers=2, pin_memory=False, collate_fn=collate_fn)\n",
    "    vl_loader = DataLoader(dvl, batch_size=EVAL_BS,  shuffle=False, num_workers=2, pin_memory=False, collate_fn=collate_fn)\n",
    "\n",
    "    model = build_model(use_lora=USE_LORA)\n",
    "\n",
    "    # Class weights (optional)\n",
    "    if CLASS_WEIGHT:\n",
    "        p1 = (y[trn_idx]==1).mean()\n",
    "        w = torch.tensor([p1, 1-p1], dtype=torch.float32, device=device)  # inverse-ish\n",
    "        class_weights = 1.0 / torch.clamp(w, min=1e-3)\n",
    "        class_weights = class_weights / class_weights.sum() * 2.0\n",
    "    else:\n",
    "        class_weights = None\n",
    "\n",
    "    loss_fct = nn.CrossEntropyLoss(weight=class_weights, label_smoothing=LABEL_SMOOTH)\n",
    "\n",
    "    # Optim & scheduler (only trainable params)\n",
    "    trainable = [p for p in model.parameters() if p.requires_grad]\n",
    "    optimizer = torch.optim.AdamW(trainable, lr=LR, weight_decay=0.01, betas=(0.9, 0.999), eps=1e-8)\n",
    "    total_steps = math.ceil(len(tr_loader) / GRAD_ACC) * EPOCHS\n",
    "    warmup_steps = int(total_steps * WARMUP_RATIO)\n",
    "    scheduler = get_cosine_schedule_with_warmup(optimizer, num_warmup_steps=warmup_steps, num_training_steps=total_steps)\n",
    "\n",
    "    best_auc = 0.0\n",
    "    for ep in range(1, EPOCHS+1):\n",
    "        tr_loss = run_epoch(model, tr_loader, optimizer, scheduler, loss_fct)\n",
    "        val_auc = evaluate(model, vl_loader)\n",
    "        print(f\"Epoch {ep}/{EPOCHS} | train_loss={tr_loss:.4f} | val_auc={val_auc:.4f}\")\n",
    "\n",
    "        # save best-by-fold\n",
    "        if val_auc >= best_auc:\n",
    "            best_auc = val_auc\n",
    "            save_dir = f\"{OUT_ROOT}/fold{fold}\"\n",
    "            os.makedirs(save_dir, exist_ok=True)\n",
    "            if USE_LORA:\n",
    "                # saves base config + LoRA adapters + head\n",
    "                model.save_pretrained(save_dir)\n",
    "            else:\n",
    "                torch.save(model.state_dict(), f\"{save_dir}/pytorch_model.bin\")\n",
    "            tok.save_pretrained(save_dir)\n",
    "\n",
    "    # Final OOF predictions with best model already in memory\n",
    "    # (If you reloaded best weights, re-run evaluate here.)\n",
    "    # Store fold preds into oof\n",
    "    # We recompute for val set:\n",
    "    with torch.no_grad():\n",
    "        probs = []\n",
    "        for batch in vl_loader:\n",
    "            batch = {k:v.to(device) for k,v in batch.items()}\n",
    "            labels = batch.pop(\"labels\")\n",
    "            logits = model(**batch).logits.float()\n",
    "            p1 = torch.softmax(logits, dim=1)[:,1]\n",
    "            probs.append(p1.cpu().numpy())\n",
    "        oof[val_idx] = np.concatenate(probs)\n",
    "\n",
    "    print(f\"Fold {fold} AUC (best): {best_auc:.4f}\")\n",
    "\n",
    "    del model, optimizer, scheduler, tr_loader, vl_loader, dtr, dvl\n",
    "    gc.collect()\n",
    "    if torch.cuda.is_available(): torch.cuda.empty_cache()\n",
    "\n",
    "print(f\"\\nOOF AUC: {roc_auc_score(y, oof):.4f}\")\n",
    "pd.DataFrame({\"oof\": oof, \"y\": y}).to_csv(f\"{OUT_ROOT}/oof.csv\", index=False)\n",
    "print(\"Saved folds under:\", OUT_ROOT)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b398dd4c",
   "metadata": {
    "papermill": {
     "duration": 0.027918,
     "end_time": "2025-09-01T03:43:19.419931",
     "exception": false,
     "start_time": "2025-09-01T03:43:19.392013",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5c3c9c40",
   "metadata": {
    "papermill": {
     "duration": 0.027834,
     "end_time": "2025-09-01T03:43:19.475946",
     "exception": false,
     "start_time": "2025-09-01T03:43:19.448112",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9219aad3",
   "metadata": {
    "papermill": {
     "duration": 0.027599,
     "end_time": "2025-09-01T03:43:19.531134",
     "exception": false,
     "start_time": "2025-09-01T03:43:19.503535",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "56cb7c38",
   "metadata": {
    "papermill": {
     "duration": 0.02809,
     "end_time": "2025-09-01T03:43:19.587135",
     "exception": false,
     "start_time": "2025-09-01T03:43:19.559045",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "03e933be",
   "metadata": {
    "papermill": {
     "duration": 0.027671,
     "end_time": "2025-09-01T03:43:19.642863",
     "exception": false,
     "start_time": "2025-09-01T03:43:19.615192",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "23f89824",
   "metadata": {
    "papermill": {
     "duration": 0.027687,
     "end_time": "2025-09-01T03:43:19.698775",
     "exception": false,
     "start_time": "2025-09-01T03:43:19.671088",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0fa70ff8",
   "metadata": {
    "papermill": {
     "duration": 0.02925,
     "end_time": "2025-09-01T03:43:19.757499",
     "exception": false,
     "start_time": "2025-09-01T03:43:19.728249",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8810c1a1",
   "metadata": {
    "papermill": {
     "duration": 0.027826,
     "end_time": "2025-09-01T03:43:19.813423",
     "exception": false,
     "start_time": "2025-09-01T03:43:19.785597",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9911a158",
   "metadata": {
    "papermill": {
     "duration": 0.027666,
     "end_time": "2025-09-01T03:43:19.869507",
     "exception": false,
     "start_time": "2025-09-01T03:43:19.841841",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9903d576",
   "metadata": {
    "papermill": {
     "duration": 0.027669,
     "end_time": "2025-09-01T03:43:19.924925",
     "exception": false,
     "start_time": "2025-09-01T03:43:19.897256",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "44ccb1cc",
   "metadata": {
    "papermill": {
     "duration": 0.027929,
     "end_time": "2025-09-01T03:43:19.981272",
     "exception": false,
     "start_time": "2025-09-01T03:43:19.953343",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3b04324b",
   "metadata": {
    "papermill": {
     "duration": 0.028056,
     "end_time": "2025-09-01T03:43:20.037538",
     "exception": false,
     "start_time": "2025-09-01T03:43:20.009482",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3e32ac2e",
   "metadata": {
    "papermill": {
     "duration": 0.027709,
     "end_time": "2025-09-01T03:43:20.093088",
     "exception": false,
     "start_time": "2025-09-01T03:43:20.065379",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0b545a41",
   "metadata": {
    "papermill": {
     "duration": 0.027758,
     "end_time": "2025-09-01T03:43:20.148587",
     "exception": false,
     "start_time": "2025-09-01T03:43:20.120829",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4959caa7",
   "metadata": {
    "papermill": {
     "duration": 0.027712,
     "end_time": "2025-09-01T03:43:20.204243",
     "exception": false,
     "start_time": "2025-09-01T03:43:20.176531",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "513ba4af",
   "metadata": {
    "papermill": {
     "duration": 0.027786,
     "end_time": "2025-09-01T03:43:20.259801",
     "exception": false,
     "start_time": "2025-09-01T03:43:20.232015",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5df0cc94",
   "metadata": {
    "papermill": {
     "duration": 0.030764,
     "end_time": "2025-09-01T03:43:20.318285",
     "exception": false,
     "start_time": "2025-09-01T03:43:20.287521",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cbcbac3e",
   "metadata": {
    "papermill": {
     "duration": 0.032437,
     "end_time": "2025-09-01T03:43:20.383217",
     "exception": false,
     "start_time": "2025-09-01T03:43:20.350780",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "17be8be5",
   "metadata": {
    "papermill": {
     "duration": 0.02803,
     "end_time": "2025-09-01T03:43:20.440636",
     "exception": false,
     "start_time": "2025-09-01T03:43:20.412606",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5d558638",
   "metadata": {
    "papermill": {
     "duration": 0.027461,
     "end_time": "2025-09-01T03:43:20.495928",
     "exception": false,
     "start_time": "2025-09-01T03:43:20.468467",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3cf2a14f",
   "metadata": {
    "papermill": {
     "duration": 0.027799,
     "end_time": "2025-09-01T03:43:20.551740",
     "exception": false,
     "start_time": "2025-09-01T03:43:20.523941",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c802a9ac",
   "metadata": {
    "papermill": {
     "duration": 0.027462,
     "end_time": "2025-09-01T03:43:20.607288",
     "exception": false,
     "start_time": "2025-09-01T03:43:20.579826",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e2138b18",
   "metadata": {
    "papermill": {
     "duration": 0.027709,
     "end_time": "2025-09-01T03:43:20.662744",
     "exception": false,
     "start_time": "2025-09-01T03:43:20.635035",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d266bb58",
   "metadata": {
    "papermill": {
     "duration": 0.030571,
     "end_time": "2025-09-01T03:43:20.721803",
     "exception": false,
     "start_time": "2025-09-01T03:43:20.691232",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0b62b268",
   "metadata": {
    "papermill": {
     "duration": 0.027715,
     "end_time": "2025-09-01T03:43:20.779221",
     "exception": false,
     "start_time": "2025-09-01T03:43:20.751506",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "181882e2",
   "metadata": {
    "papermill": {
     "duration": 0.028185,
     "end_time": "2025-09-01T03:43:20.835940",
     "exception": false,
     "start_time": "2025-09-01T03:43:20.807755",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c67e3f81",
   "metadata": {
    "papermill": {
     "duration": 0.027624,
     "end_time": "2025-09-01T03:43:20.891255",
     "exception": false,
     "start_time": "2025-09-01T03:43:20.863631",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aab0f563",
   "metadata": {
    "papermill": {
     "duration": 0.028495,
     "end_time": "2025-09-01T03:43:20.948314",
     "exception": false,
     "start_time": "2025-09-01T03:43:20.919819",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e21f8eea",
   "metadata": {
    "papermill": {
     "duration": 0.02788,
     "end_time": "2025-09-01T03:43:21.003893",
     "exception": false,
     "start_time": "2025-09-01T03:43:20.976013",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8267fc1d",
   "metadata": {
    "papermill": {
     "duration": 0.028333,
     "end_time": "2025-09-01T03:43:21.060767",
     "exception": false,
     "start_time": "2025-09-01T03:43:21.032434",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "730da1a0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-01T03:43:21.118319Z",
     "iopub.status.busy": "2025-09-01T03:43:21.118014Z",
     "iopub.status.idle": "2025-09-01T03:43:21.124979Z",
     "shell.execute_reply": "2025-09-01T03:43:21.124429Z"
    },
    "papermill": {
     "duration": 0.03734,
     "end_time": "2025-09-01T03:43:21.126021",
     "exception": false,
     "start_time": "2025-09-01T03:43:21.088681",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # =========================\n",
    "# # Qwen2.5-0.5B + LoRA (SEQ_CLS) — 5-fold, dtype-safe head\n",
    "# # =========================\n",
    "# !pip -q install \"transformers==4.44.2\" \"accelerate==0.33.0\" \"peft==0.12.0\"\n",
    "\n",
    "# import os, gc, warnings\n",
    "# warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "# import numpy as np\n",
    "# import pandas as pd\n",
    "# from sklearn.model_selection import StratifiedKFold\n",
    "# from sklearn.metrics import roc_auc_score\n",
    "\n",
    "# import torch\n",
    "# from torch import nn\n",
    "# from torch.utils.data import Dataset, DataLoader\n",
    "\n",
    "# from transformers import (\n",
    "#     AutoTokenizer,\n",
    "#     AutoModelForSequenceClassification,\n",
    "#     DataCollatorWithPadding,\n",
    "#     Trainer,\n",
    "#     TrainingArguments,\n",
    "#     set_seed,\n",
    "# )\n",
    "\n",
    "# from peft import LoraConfig, get_peft_model\n",
    "\n",
    "# # -------- Config --------\n",
    "# DATA_DIR  = \"/kaggle/input/jigsaw-agile-community-rules\"\n",
    "# TRAIN_CSV = f\"{DATA_DIR}/train.csv\"\n",
    "\n",
    "# MODEL_ID  = \"Qwen/Qwen2.5-0.5B\"\n",
    "# OUT_ROOT  = \"/kaggle/working/qwen25_lora_v2\"\n",
    "# os.makedirs(OUT_ROOT, exist_ok=True)\n",
    "\n",
    "# SEED=42; N_FOLDS=5\n",
    "# MAX_LEN=256\n",
    "# EPOCHS=3\n",
    "# TRAIN_BS=4\n",
    "# GRAD_ACC=4\n",
    "# LR=2e-4\n",
    "# WARMUP=0.05\n",
    "# LABEL_SMOOTH = 0.0\n",
    "\n",
    "# set_seed(SEED)\n",
    "# device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n",
    "# torch.backends.cuda.matmul.allow_tf32 = True\n",
    "\n",
    "# # -------- Data prep --------\n",
    "# def _clip(x):\n",
    "#     x = \"\" if pd.isna(x) else str(x).strip()\n",
    "#     return x if 0 < len(x) < 300 else \"\"\n",
    "\n",
    "# def build_text_a(row):\n",
    "#     sub  = str(row[\"subreddit\"])\n",
    "#     rule = str(row[\"rule\"])\n",
    "#     pos1 = _clip(row.get(\"positive_example_1\",\"\"))\n",
    "#     neg1 = _clip(row.get(\"negative_example_1\",\"\"))\n",
    "#     parts = [f\"r/{sub}\", f\"Rule: {rule}\"]\n",
    "#     if pos1: parts.append(f\"Yes: {pos1}\")\n",
    "#     if neg1: parts.append(f\"No: {neg1}\")\n",
    "#     return \" | \".join(parts)\n",
    "\n",
    "# def prepare_df(df):\n",
    "#     df = df.copy()\n",
    "#     df[\"text_a\"] = df.apply(build_text_a, axis=1)\n",
    "#     df[\"text_b\"] = df[\"body\"].astype(str)\n",
    "#     return df\n",
    "\n",
    "# df = pd.read_csv(TRAIN_CSV)\n",
    "# df = prepare_df(df)\n",
    "# y  = df[\"rule_violation\"].astype(int).values\n",
    "\n",
    "# # -------- Tokenizer --------\n",
    "# tok = AutoTokenizer.from_pretrained(MODEL_ID, use_fast=True, trust_remote_code=True)\n",
    "# if tok.pad_token is None:\n",
    "#     if tok.eos_token is None:\n",
    "#         tok.add_special_tokens({\"eos_token\":\"</s>\"})\n",
    "#     tok.pad_token = tok.eos_token\n",
    "# tok.padding_side = \"right\"\n",
    "# collator = DataCollatorWithPadding(tokenizer=tok)\n",
    "\n",
    "# # -------- Dataset --------\n",
    "# class PairDataset(Dataset):\n",
    "#     def __init__(self, df, labels=None, max_len=256):\n",
    "#         self.a = df[\"text_a\"].tolist()\n",
    "#         self.b = df[\"text_b\"].tolist()\n",
    "#         self.labels = labels\n",
    "#         self.max_len = max_len\n",
    "#     def __len__(self): return len(self.a)\n",
    "#     def __getitem__(self, i):\n",
    "#         item = tok(self.a[i], self.b[i], truncation=True, max_length=self.max_len)\n",
    "#         if self.labels is not None:\n",
    "#             item[\"labels\"] = torch.tensor(int(self.labels[i]), dtype=torch.long)\n",
    "#         return item\n",
    "\n",
    "# # -------- Build LoRA model with dtype-aligned head --------\n",
    "# def build_lora_model():\n",
    "#     model = AutoModelForSequenceClassification.from_pretrained(\n",
    "#         MODEL_ID,\n",
    "#         num_labels=2,\n",
    "#         trust_remote_code=True,\n",
    "#         torch_dtype=torch.float16 if device==\"cuda\" else torch.float32,  # base in half on GPU\n",
    "#     )\n",
    "#     model.config.use_cache = False\n",
    "#     model.config.pad_token_id = tok.pad_token_id\n",
    "#     model.config.problem_type = \"single_label_classification\"\n",
    "\n",
    "#     if model.get_input_embeddings().num_embeddings != len(tok):\n",
    "#         model.resize_token_embeddings(len(tok))\n",
    "\n",
    "#     base_dtype  = next(model.parameters()).dtype  # <- fp16 on CUDA\n",
    "#     hidden = model.config.hidden_size\n",
    "\n",
    "#     # fresh classifier head EXACTLY in base dtype+device\n",
    "#     model.score = nn.Linear(hidden, 2).to(device=device, dtype=base_dtype)\n",
    "#     nn.init.xavier_uniform_(model.score.weight)\n",
    "#     nn.init.zeros_(model.score.bias)\n",
    "\n",
    "#     # LoRA on attention + MLP, keep 'score' trainable\n",
    "#     lcfg = LoraConfig(\n",
    "#         r=16, lora_alpha=16, lora_dropout=0.05, bias=\"none\",\n",
    "#         target_modules=[\"q_proj\",\"k_proj\",\"v_proj\",\"o_proj\",\"gate_proj\",\"up_proj\",\"down_proj\"],\n",
    "#         task_type=\"SEQ_CLS\",\n",
    "#         modules_to_save=[\"score\"]\n",
    "#     )\n",
    "#     model = get_peft_model(model, lcfg)\n",
    "\n",
    "#     # extra safety: ensure every score param stays in base dtype\n",
    "#     for n, p in model.named_parameters():\n",
    "#         if \"score\" in n:\n",
    "#             p.data = p.data.to(base_dtype)\n",
    "\n",
    "#     return model.to(device)\n",
    "\n",
    "# # -------- Metrics (safe) --------\n",
    "# def compute_metrics(eval_pred):\n",
    "#     logits, labels = eval_pred\n",
    "#     probs = torch.softmax(torch.tensor(logits, dtype=torch.float32), dim=1)[:,1].numpy()\n",
    "#     probs = np.nan_to_num(probs, nan=0.5)\n",
    "#     try:\n",
    "#         return {\"auc\": roc_auc_score(labels, probs)}\n",
    "#     except Exception:\n",
    "#         return {\"auc\": 0.5}\n",
    "\n",
    "# # -------- Trainer with FP32 loss (stable) --------\n",
    "# class FP32LossTrainer(Trainer):\n",
    "#     def compute_loss(self, model, inputs, return_outputs=False):\n",
    "#         labels = inputs.get(\"labels\")\n",
    "#         outputs = model(**{k:v for k,v in inputs.items() if k!=\"labels\"})\n",
    "#         logits = outputs.logits.float()  # compute CE in fp32 for stability\n",
    "#         loss_fct = nn.CrossEntropyLoss(label_smoothing=LABEL_SMOOTH)\n",
    "#         loss = loss_fct(logits.view(-1, 2), labels.view(-1))\n",
    "#         return (loss, outputs) if return_outputs else loss\n",
    "\n",
    "# # -------- CV Train --------\n",
    "# skf = StratifiedKFold(n_splits=N_FOLDS, shuffle=True, random_state=SEED)\n",
    "# oof = np.zeros(len(df), dtype=float)\n",
    "\n",
    "# for fold, (trn_idx, val_idx) in enumerate(skf.split(df, y), 1):\n",
    "#     print(f\"\\n===== Fold {fold}/{N_FOLDS} =====\")\n",
    "#     dtr = PairDataset(df.iloc[trn_idx], y[trn_idx], MAX_LEN)\n",
    "#     dvl = PairDataset(df.iloc[val_idx], y[val_idx], MAX_LEN)\n",
    "\n",
    "#     model = build_lora_model()\n",
    "\n",
    "#     args = TrainingArguments(\n",
    "#         output_dir=f\"{OUT_ROOT}/fold{fold}\",\n",
    "#         num_train_epochs=EPOCHS,\n",
    "#         per_device_train_batch_size=TRAIN_BS,\n",
    "#         gradient_accumulation_steps=GRAD_ACC,\n",
    "#         learning_rate=LR,\n",
    "#         warmup_ratio=WARMUP,\n",
    "#         weight_decay=0.01,\n",
    "#         logging_steps=25,\n",
    "#         evaluation_strategy=\"epoch\",\n",
    "#         save_strategy=\"epoch\",\n",
    "#         load_best_model_at_end=True,\n",
    "#         metric_for_best_model=\"auc\",\n",
    "#         greater_is_better=True,\n",
    "#         report_to=\"none\",\n",
    "#         remove_unused_columns=False,\n",
    "#         fp16=(device==\"cuda\"),\n",
    "#         dataloader_pin_memory=False,\n",
    "#         seed=SEED,\n",
    "#     )\n",
    "\n",
    "#     trainer = FP32LossTrainer(\n",
    "#         model=model,\n",
    "#         args=args,\n",
    "#         train_dataset=dtr,\n",
    "#         eval_dataset=dvl,                 # real val so no NaN\n",
    "#         tokenizer=tok,\n",
    "#         data_collator=collator,\n",
    "#         compute_metrics=compute_metrics,\n",
    "#     )\n",
    "#     trainer.train()\n",
    "\n",
    "#     trainer.model.save_pretrained(f\"{OUT_ROOT}/fold{fold}\")\n",
    "#     tok.save_pretrained(f\"{OUT_ROOT}/fold{fold}\")\n",
    "#     print(f\"Saved fold {fold} to {OUT_ROOT}/fold{fold}\")\n",
    "\n",
    "#     # OOF\n",
    "#     model.eval()\n",
    "#     dl = DataLoader(dvl, batch_size=128, shuffle=False, collate_fn=collator)\n",
    "#     preds = []\n",
    "#     with torch.no_grad():\n",
    "#         for batch in dl:\n",
    "#             for k in batch: batch[k] = batch[k].to(device)\n",
    "#             logits = model(**batch).logits.float()\n",
    "#             prob = torch.softmax(torch.nan_to_num(logits, nan=0.0, posinf=1e4, neginf=-1e4), dim=1)[:,1]\n",
    "#             preds.append(torch.nan_to_num(prob, nan=0.5).cpu().numpy())\n",
    "#     prob1 = np.clip(np.concatenate(preds), 0.0, 1.0)\n",
    "#     oof[val_idx] = prob1\n",
    "#     print(f\"Fold {fold} AUC: {roc_auc_score(y[val_idx], prob1):.4f}\")\n",
    "\n",
    "#     del trainer, model, dtr, dvl, dl, preds, prob1\n",
    "#     gc.collect()\n",
    "#     if torch.cuda.is_available(): torch.cuda.empty_cache()\n",
    "\n",
    "# print(f\"\\nOOF AUC: {roc_auc_score(y, oof):.4f}\")\n",
    "# pd.DataFrame({\"oof\": oof, \"y\": y}).to_csv(f\"{OUT_ROOT}/oof.csv\", index=False)\n",
    "# print(\"Saved folds under:\", OUT_ROOT)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2169ed44",
   "metadata": {
    "papermill": {
     "duration": 0.028194,
     "end_time": "2025-09-01T03:43:21.182110",
     "exception": false,
     "start_time": "2025-09-01T03:43:21.153916",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9def806f",
   "metadata": {
    "papermill": {
     "duration": 0.027816,
     "end_time": "2025-09-01T03:43:21.237695",
     "exception": false,
     "start_time": "2025-09-01T03:43:21.209879",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "213c4852",
   "metadata": {
    "papermill": {
     "duration": 0.028309,
     "end_time": "2025-09-01T03:43:21.294483",
     "exception": false,
     "start_time": "2025-09-01T03:43:21.266174",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "618065eb",
   "metadata": {
    "papermill": {
     "duration": 0.029096,
     "end_time": "2025-09-01T03:43:21.352402",
     "exception": false,
     "start_time": "2025-09-01T03:43:21.323306",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "40c9d80b",
   "metadata": {
    "papermill": {
     "duration": 0.02811,
     "end_time": "2025-09-01T03:43:21.409949",
     "exception": false,
     "start_time": "2025-09-01T03:43:21.381839",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8a439c35",
   "metadata": {
    "papermill": {
     "duration": 0.028118,
     "end_time": "2025-09-01T03:43:21.466151",
     "exception": false,
     "start_time": "2025-09-01T03:43:21.438033",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c6ae0f39",
   "metadata": {
    "papermill": {
     "duration": 0.027992,
     "end_time": "2025-09-01T03:43:21.522219",
     "exception": false,
     "start_time": "2025-09-01T03:43:21.494227",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3d407468",
   "metadata": {
    "papermill": {
     "duration": 0.028507,
     "end_time": "2025-09-01T03:43:21.579182",
     "exception": false,
     "start_time": "2025-09-01T03:43:21.550675",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "80aa95d0",
   "metadata": {
    "papermill": {
     "duration": 0.028091,
     "end_time": "2025-09-01T03:43:21.635988",
     "exception": false,
     "start_time": "2025-09-01T03:43:21.607897",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3e3e90ef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-01T03:43:21.696881Z",
     "iopub.status.busy": "2025-09-01T03:43:21.696276Z",
     "iopub.status.idle": "2025-09-01T03:43:21.699989Z",
     "shell.execute_reply": "2025-09-01T03:43:21.699184Z"
    },
    "papermill": {
     "duration": 0.035495,
     "end_time": "2025-09-01T03:43:21.701137",
     "exception": false,
     "start_time": "2025-09-01T03:43:21.665642",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# !pip -q install \"transformers==4.44.2\" \"accelerate==0.33.0\" \"peft==0.12.0\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2e6290fa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-01T03:43:21.762769Z",
     "iopub.status.busy": "2025-09-01T03:43:21.762310Z",
     "iopub.status.idle": "2025-09-01T03:43:21.765341Z",
     "shell.execute_reply": "2025-09-01T03:43:21.764649Z"
    },
    "papermill": {
     "duration": 0.034413,
     "end_time": "2025-09-01T03:43:21.766480",
     "exception": false,
     "start_time": "2025-09-01T03:43:21.732067",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import os, gc, warnings\n",
    "# warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6155031b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-01T03:43:21.823661Z",
     "iopub.status.busy": "2025-09-01T03:43:21.823451Z",
     "iopub.status.idle": "2025-09-01T03:43:21.826573Z",
     "shell.execute_reply": "2025-09-01T03:43:21.825884Z"
    },
    "papermill": {
     "duration": 0.033079,
     "end_time": "2025-09-01T03:43:21.827650",
     "exception": false,
     "start_time": "2025-09-01T03:43:21.794571",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import numpy as np\n",
    "# import pandas as pd\n",
    "# from sklearn.model_selection import StratifiedKFold\n",
    "# from sklearn.metrics import roc_auc_score\n",
    "# import torch\n",
    "# from torch import nn\n",
    "# from torch.utils.data import Dataset, DataLoader"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6061c9dc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-01T03:43:21.938166Z",
     "iopub.status.busy": "2025-09-01T03:43:21.937502Z",
     "iopub.status.idle": "2025-09-01T03:43:21.941107Z",
     "shell.execute_reply": "2025-09-01T03:43:21.940388Z"
    },
    "papermill": {
     "duration": 0.084984,
     "end_time": "2025-09-01T03:43:21.942283",
     "exception": false,
     "start_time": "2025-09-01T03:43:21.857299",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# from transformers import (\n",
    "#     AutoTokenizer,\n",
    "#     AutoModelForSequenceClassification,\n",
    "#     DataCollatorWithPadding,\n",
    "#     Trainer,\n",
    "#     TrainingArguments,\n",
    "#     EarlyStoppingCallback,\n",
    "#     set_seed,\n",
    "# )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b11c3e2e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-01T03:43:22.001222Z",
     "iopub.status.busy": "2025-09-01T03:43:22.000994Z",
     "iopub.status.idle": "2025-09-01T03:43:22.004220Z",
     "shell.execute_reply": "2025-09-01T03:43:22.003698Z"
    },
    "papermill": {
     "duration": 0.034256,
     "end_time": "2025-09-01T03:43:22.005270",
     "exception": false,
     "start_time": "2025-09-01T03:43:21.971014",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# from peft import LoraConfig, get_peft_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "8bbb687a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-01T03:43:22.062762Z",
     "iopub.status.busy": "2025-09-01T03:43:22.062557Z",
     "iopub.status.idle": "2025-09-01T03:43:22.065247Z",
     "shell.execute_reply": "2025-09-01T03:43:22.064763Z"
    },
    "papermill": {
     "duration": 0.032627,
     "end_time": "2025-09-01T03:43:22.066191",
     "exception": false,
     "start_time": "2025-09-01T03:43:22.033564",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # ---------------- Config ----------------\n",
    "# DATA_DIR  = \"/kaggle/input/jigsaw-agile-community-rules\"\n",
    "# TRAIN_CSV = f\"{DATA_DIR}/train.csv\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "22365cd0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-01T03:43:22.123406Z",
     "iopub.status.busy": "2025-09-01T03:43:22.123167Z",
     "iopub.status.idle": "2025-09-01T03:43:22.126212Z",
     "shell.execute_reply": "2025-09-01T03:43:22.125525Z"
    },
    "papermill": {
     "duration": 0.032686,
     "end_time": "2025-09-01T03:43:22.127243",
     "exception": false,
     "start_time": "2025-09-01T03:43:22.094557",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# MODEL_ID  = \"Qwen/Qwen2.5-0.5B\"    # small & stable\n",
    "# OUT_ROOT  = \"/kaggle/working/qwen25_loRA_v2\"\n",
    "# os.makedirs(OUT_ROOT, exist_ok=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c1ecb4aa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-01T03:43:22.185358Z",
     "iopub.status.busy": "2025-09-01T03:43:22.185118Z",
     "iopub.status.idle": "2025-09-01T03:43:22.188173Z",
     "shell.execute_reply": "2025-09-01T03:43:22.187530Z"
    },
    "papermill": {
     "duration": 0.032951,
     "end_time": "2025-09-01T03:43:22.189201",
     "exception": false,
     "start_time": "2025-09-01T03:43:22.156250",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# SEED=42; \n",
    "# N_FOLDS=5\n",
    "# MAX_LEN=384\n",
    "# EPOCHS=3\n",
    "# TRAIN_BS=4\n",
    "# GRAD_ACC=4\n",
    "# LR=2e-4    # 1.5e-4\n",
    "# WARMUP=0.05\n",
    "# LABEL_SMOOTH=0.05\n",
    "# PATIENCE=1           # early stopping after 1 epoch w/o AUC gain"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "fba199e5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-01T03:43:22.245831Z",
     "iopub.status.busy": "2025-09-01T03:43:22.245305Z",
     "iopub.status.idle": "2025-09-01T03:43:22.248457Z",
     "shell.execute_reply": "2025-09-01T03:43:22.247941Z"
    },
    "papermill": {
     "duration": 0.032448,
     "end_time": "2025-09-01T03:43:22.249486",
     "exception": false,
     "start_time": "2025-09-01T03:43:22.217038",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# set_seed(SEED)\n",
    "# device = \"cuda\" if torch.cuda.is_available() else \"cpu\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "7a19767f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-01T03:43:22.306387Z",
     "iopub.status.busy": "2025-09-01T03:43:22.306150Z",
     "iopub.status.idle": "2025-09-01T03:43:22.309101Z",
     "shell.execute_reply": "2025-09-01T03:43:22.308466Z"
    },
    "papermill": {
     "duration": 0.032754,
     "end_time": "2025-09-01T03:43:22.310108",
     "exception": false,
     "start_time": "2025-09-01T03:43:22.277354",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # ------------- Build paired inputs -------------\n",
    "# def _clip(x):\n",
    "#     x = \"\" if pd.isna(x) else str(x).strip()\n",
    "#     return x if 0 < len(x) < 300 else \"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "3e36e880",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-01T03:43:22.367830Z",
     "iopub.status.busy": "2025-09-01T03:43:22.367635Z",
     "iopub.status.idle": "2025-09-01T03:43:22.370734Z",
     "shell.execute_reply": "2025-09-01T03:43:22.370076Z"
    },
    "papermill": {
     "duration": 0.032856,
     "end_time": "2025-09-01T03:43:22.371787",
     "exception": false,
     "start_time": "2025-09-01T03:43:22.338931",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# def build_text_a(row):\n",
    "#     sub  = str(row[\"subreddit\"])\n",
    "#     rule = str(row[\"rule\"])\n",
    "#     pos1 = _clip(row.get(\"positive_example_1\",\"\"))\n",
    "#     neg1 = _clip(row.get(\"negative_example_1\",\"\"))\n",
    "#     parts = [f\"r/{sub}\", f\"Rule: {rule}\"]\n",
    "#     if pos1: parts.append(f\"Yes: {pos1}\")\n",
    "#     if neg1: parts.append(f\"No: {neg1}\")\n",
    "#     return \" | \".join(parts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "cdfe19a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-01T03:43:22.428926Z",
     "iopub.status.busy": "2025-09-01T03:43:22.428715Z",
     "iopub.status.idle": "2025-09-01T03:43:22.431677Z",
     "shell.execute_reply": "2025-09-01T03:43:22.431015Z"
    },
    "papermill": {
     "duration": 0.032747,
     "end_time": "2025-09-01T03:43:22.432675",
     "exception": false,
     "start_time": "2025-09-01T03:43:22.399928",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# def prepare_df(df):\n",
    "#     df = df.copy()\n",
    "#     df[\"text_a\"] = df.apply(build_text_a, axis=1)\n",
    "#     df[\"text_b\"] = df[\"body\"].astype(str)\n",
    "#     return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "81fda2f4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-01T03:43:22.490736Z",
     "iopub.status.busy": "2025-09-01T03:43:22.490066Z",
     "iopub.status.idle": "2025-09-01T03:43:22.493208Z",
     "shell.execute_reply": "2025-09-01T03:43:22.492671Z"
    },
    "papermill": {
     "duration": 0.033268,
     "end_time": "2025-09-01T03:43:22.494225",
     "exception": false,
     "start_time": "2025-09-01T03:43:22.460957",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# df = pd.read_csv(TRAIN_CSV)\n",
    "# df = prepare_df(df)\n",
    "# y  = df[\"rule_violation\"].astype(int).values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "df803145",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-01T03:43:22.555935Z",
     "iopub.status.busy": "2025-09-01T03:43:22.555703Z",
     "iopub.status.idle": "2025-09-01T03:43:22.558684Z",
     "shell.execute_reply": "2025-09-01T03:43:22.558154Z"
    },
    "papermill": {
     "duration": 0.035028,
     "end_time": "2025-09-01T03:43:22.559760",
     "exception": false,
     "start_time": "2025-09-01T03:43:22.524732",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # ------------- Tokenizer (set PAD) -------------\n",
    "# tok = AutoTokenizer.from_pretrained(MODEL_ID, use_fast=True, trust_remote_code=True)\n",
    "# # Use EOS as PAD if PAD missing\n",
    "# if tok.pad_token is None:\n",
    "#     if tok.eos_token is None:\n",
    "#         tok.add_special_tokens({\"eos_token\":\"</s>\"})\n",
    "#     tok.pad_token = tok.eos_token\n",
    "# tok.padding_side = \"right\"  # OK for seq cls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "005fe018",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-01T03:43:22.618912Z",
     "iopub.status.busy": "2025-09-01T03:43:22.618231Z",
     "iopub.status.idle": "2025-09-01T03:43:22.621477Z",
     "shell.execute_reply": "2025-09-01T03:43:22.620904Z"
    },
    "papermill": {
     "duration": 0.034419,
     "end_time": "2025-09-01T03:43:22.622609",
     "exception": false,
     "start_time": "2025-09-01T03:43:22.588190",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# collator = DataCollatorWithPadding(tokenizer=tok)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "27462a29",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-01T03:43:22.685654Z",
     "iopub.status.busy": "2025-09-01T03:43:22.685402Z",
     "iopub.status.idle": "2025-09-01T03:43:22.688872Z",
     "shell.execute_reply": "2025-09-01T03:43:22.688307Z"
    },
    "papermill": {
     "duration": 0.036081,
     "end_time": "2025-09-01T03:43:22.689960",
     "exception": false,
     "start_time": "2025-09-01T03:43:22.653879",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # ------------- Dataset -------------\n",
    "# class PairDataset(Dataset):\n",
    "#     def __init__(self, df, labels=None, max_len=256):\n",
    "#         self.a = df[\"text_a\"].tolist()\n",
    "#         self.b = df[\"text_b\"].tolist()\n",
    "#         self.labels = labels\n",
    "#         self.max_len = max_len\n",
    "#     def __len__(self): return len(self.a)\n",
    "#     def __getitem__(self, i):\n",
    "#         item = tok(self.a[i], self.b[i], truncation=True, max_length=self.max_len)\n",
    "#         if self.labels is not None:\n",
    "#             item[\"labels\"] = torch.tensor(int(self.labels[i]), dtype=torch.long)  # <-- important\n",
    "#         return item"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "4f0cd374",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-01T03:43:22.752660Z",
     "iopub.status.busy": "2025-09-01T03:43:22.752435Z",
     "iopub.status.idle": "2025-09-01T03:43:22.756383Z",
     "shell.execute_reply": "2025-09-01T03:43:22.755815Z"
    },
    "papermill": {
     "duration": 0.037582,
     "end_time": "2025-09-01T03:43:22.757507",
     "exception": false,
     "start_time": "2025-09-01T03:43:22.719925",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # ------------- Model builder (freeze base, train head) -------------\n",
    "# def build_lora_model():\n",
    "#     #base_dtype = (torch.float16 if (device==\"cuda\") else torch.float32).to(device)\n",
    "    \n",
    "#     model = AutoModelForSequenceClassification.from_pretrained(\n",
    "#         MODEL_ID,\n",
    "#         num_labels=2,\n",
    "#         trust_remote_code=True,\n",
    "#         torch_dtype=(torch.float16 if device==\"cuda\" else torch.float32)   #torch.float32,\n",
    "#     ).to(device)\n",
    "    \n",
    "#     model.config.use_cache = False\n",
    "#     # ensure PAD token id is set\n",
    "#     model.config.pad_token_id = tok.pad_token_id\n",
    "#     model.config.problem_type = \"single_label_classification\"\n",
    "\n",
    "#     # keep embeddings in sync if special tokens were added\n",
    "#     if model.get_input_embeddings().num_embeddings != len(tok):\n",
    "#         model.resize_token_embeddings(len(tok))\n",
    "\n",
    "#     # build fresh classifier head in SAME dtype/device as the base model\n",
    "#     base_dtype  = next(model.parameters()).dtype\n",
    "#     # base_device = next(model.parameters()).device\n",
    "#     hidden = model.config.hidden_size\n",
    "\n",
    "#     model.score = torch.nn.Linear(hidden, 2) #device=device, dtype=base_dtype) # , bias=True, device=base_device, dtype=base_dtype\n",
    "#     torch.nn.init.xavier_uniform_(model.score.weight)\n",
    "#     torch.nn.init.zeros_(model.score.bias)\n",
    "\n",
    "#     # ---------------- LoRA config ----------------\n",
    "#     LORA_CFG = LoraConfig(\n",
    "#         r=16,\n",
    "#         lora_alpha=16,    ## 32\n",
    "#         lora_dropout=0.05,\n",
    "#         bias=\"none\",\n",
    "#         task_type=\"SEQ_CLS\",\n",
    "#         target_modules=[\n",
    "#         \"q_proj\",\"k_proj\",\"v_proj\",\"o_proj\",\n",
    "#         \"gate_proj\",\"up_proj\",\"down_proj\",\n",
    "#         ],\n",
    "#     modules_to_save=[\"score\"],   # keep the classification head alongside adapters\n",
    "#     )\n",
    "    \n",
    "#     # wrap with LoRA\n",
    "#     model = get_peft_model(model, LORA_CFG)\n",
    "    \n",
    "#     # # freeze everything except the classifier head\n",
    "#     # for n, p in model.named_parameters():\n",
    "#     #     p.requires_grad = (\"lora_\" in n) or (\"score\" in n)\n",
    "\n",
    "#     # # memory saver\n",
    "#     # if hasattr(model, \"gradient_checkpointing_enable\"):\n",
    "#     #     model.gradient_checkpointing_enable()\n",
    "\n",
    "#     return model.to(device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4b6a86e4",
   "metadata": {
    "papermill": {
     "duration": 0.036,
     "end_time": "2025-09-01T03:43:22.836135",
     "exception": false,
     "start_time": "2025-09-01T03:43:22.800135",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "ca776bec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-01T03:43:22.896636Z",
     "iopub.status.busy": "2025-09-01T03:43:22.896415Z",
     "iopub.status.idle": "2025-09-01T03:43:22.901399Z",
     "shell.execute_reply": "2025-09-01T03:43:22.900723Z"
    },
    "papermill": {
     "duration": 0.035151,
     "end_time": "2025-09-01T03:43:22.902555",
     "exception": false,
     "start_time": "2025-09-01T03:43:22.867404",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # -------- Metrics (safe AUC) --------\n",
    "# def compute_metrics(eval_pred):\n",
    "#     logits, labels = eval_pred\n",
    "#     probs = torch.softmax(torch.tensor(logits, dtype=torch.float32), dim=1)[:,1].numpy()\n",
    "#     probs = np.nan_to_num(probs, nan=0.5)\n",
    "#     try:\n",
    "#         return {\"auc\": roc_auc_score(labels, probs)}\n",
    "#     except Exception:\n",
    "#         return {\"auc\": 0.5}\n",
    "\n",
    "# # -------- Trainer with FP32 loss to avoid overflow --------\n",
    "# class FP32LossTrainer(Trainer):\n",
    "#     def compute_loss(self, model, inputs, return_outputs=False):\n",
    "#         labels = inputs.get(\"labels\")\n",
    "#         outputs = model(**{k:v for k,v in inputs.items() if k!=\"labels\"})\n",
    "#         logits = outputs.logits.float()  # FP32 loss path\n",
    "#         loss_fct = nn.CrossEntropyLoss(label_smoothing=LABEL_SMOOTH)\n",
    "#         loss = loss_fct(logits.view(-1, 2), labels.view(-1))\n",
    "#         return (loss, outputs) if return_outputs else loss\n",
    "\n",
    "# # -------- CV Train --------\n",
    "# skf = StratifiedKFold(n_splits=N_FOLDS, shuffle=True, random_state=SEED)\n",
    "# oof = np.zeros(len(df), dtype=float)\n",
    "\n",
    "# for fold, (trn_idx, val_idx) in enumerate(skf.split(df, y), 1):\n",
    "#     print(f\"\\n===== Fold {fold}/{N_FOLDS} =====\")\n",
    "#     dtr = PairDataset(df.iloc[trn_idx], y[trn_idx], MAX_LEN)\n",
    "#     dvl = PairDataset(df.iloc[val_idx], y[val_idx], MAX_LEN)\n",
    "\n",
    "#     model = build_lora_model()\n",
    "\n",
    "#     args = TrainingArguments(\n",
    "#         output_dir=f\"{OUT_ROOT}/fold{fold}\",\n",
    "#         num_train_epochs=EPOCHS,\n",
    "#         per_device_train_batch_size=TRAIN_BS,\n",
    "#         gradient_accumulation_steps=GRAD_ACC,\n",
    "#         learning_rate=LR,\n",
    "#         warmup_ratio=WARMUP,\n",
    "#         weight_decay=0.01,\n",
    "#         logging_steps=25,\n",
    "#         evaluation_strategy=\"epoch\",          # << real eval each epoch\n",
    "#         save_strategy=\"epoch\",\n",
    "#         load_best_model_at_end=True,\n",
    "#         metric_for_best_model=\"auc\",\n",
    "#         greater_is_better=True,\n",
    "#         report_to=\"none\",\n",
    "#         remove_unused_columns=False,\n",
    "#         fp16=(device==\"cuda\"),\n",
    "#         max_grad_norm=1.0,\n",
    "#         dataloader_pin_memory=False,\n",
    "#         seed=SEED,\n",
    "#     )\n",
    "\n",
    "#     trainer = FP32LossTrainer(\n",
    "#         model=model,\n",
    "#         args=args,\n",
    "#         train_dataset=dtr,\n",
    "#         eval_dataset=dvl,                     # << IMPORTANT\n",
    "#         tokenizer=tok,\n",
    "#         data_collator=collator,\n",
    "#         compute_metrics=compute_metrics,      # << AUC in the table\n",
    "#     )\n",
    "#     trainer.train()\n",
    "\n",
    "#     # save fold adapter+head and tokenizer\n",
    "#     trainer.model.save_pretrained(f\"{OUT_ROOT}/fold{fold}\")\n",
    "#     tok.save_pretrained(f\"{OUT_ROOT}/fold{fold}\")\n",
    "#     print(f\"Saved fold {fold} to {OUT_ROOT}/fold{fold}\")\n",
    "\n",
    "#     # OOF\n",
    "#     model.eval()\n",
    "#     dl = DataLoader(dvl, batch_size=128, shuffle=False, collate_fn=collator)\n",
    "#     preds = []\n",
    "#     with torch.no_grad():\n",
    "#         for batch in dl:\n",
    "#             for k in batch: batch[k] = batch[k].to(device)\n",
    "#             logits = model(**batch).logits.float()\n",
    "#             prob = torch.softmax(torch.nan_to_num(logits, nan=0.0, posinf=1e4, neginf=-1e4), dim=1)[:,1]\n",
    "#             preds.append(torch.nan_to_num(prob, nan=0.5).cpu().numpy())\n",
    "#     prob1 = np.clip(np.concatenate(preds), 0.0, 1.0)\n",
    "#     oof[val_idx] = prob1\n",
    "#     print(f\"Fold {fold} AUC: {roc_auc_score(y[val_idx], prob1):.4f}\")\n",
    "\n",
    "#     del trainer, model, dtr, dvl, dl, preds, prob1\n",
    "#     gc.collect()\n",
    "#     if torch.cuda.is_available(): torch.cuda.empty_cache()\n",
    "\n",
    "# print(f\"\\nOOF AUC: {roc_auc_score(y, oof):.4f}\")\n",
    "# pd.DataFrame({\"oof\": oof, \"y\": y}).to_csv(f\"{OUT_ROOT}/oof.csv\", index=False)\n",
    "# print(\"Saved folds under:\", OUT_ROOT)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "aded8cf0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-01T03:43:22.988733Z",
     "iopub.status.busy": "2025-09-01T03:43:22.988480Z",
     "iopub.status.idle": "2025-09-01T03:43:22.991524Z",
     "shell.execute_reply": "2025-09-01T03:43:22.990986Z"
    },
    "papermill": {
     "duration": 0.046348,
     "end_time": "2025-09-01T03:43:22.992562",
     "exception": false,
     "start_time": "2025-09-01T03:43:22.946214",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # ---------------- Class weights (handle imbalance) ----------------\n",
    "# pos = y.sum()\n",
    "# neg = len(y) - pos\n",
    "# # weight for class 0 = 1.0, class 1 = neg/pos  (heavier penalty on minority)\n",
    "# class_weights = torch.tensor([1.0, float(neg / max(pos, 1))], dtype=torch.float32).to(device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "c1a241df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-01T03:43:23.049918Z",
     "iopub.status.busy": "2025-09-01T03:43:23.049695Z",
     "iopub.status.idle": "2025-09-01T03:43:23.053257Z",
     "shell.execute_reply": "2025-09-01T03:43:23.052725Z"
    },
    "papermill": {
     "duration": 0.033831,
     "end_time": "2025-09-01T03:43:23.054374",
     "exception": false,
     "start_time": "2025-09-01T03:43:23.020543",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # ---------------- AUC metric ----------------\n",
    "# def compute_metrics(eval_pred):\n",
    "#     logits, labels = eval_pred\n",
    "#     logits = np.asarray(logits, dtype=np.float64)\n",
    "\n",
    "#     # sanitize numerics\n",
    "#     logits = np.nan_to_num(logits, nan=0.0, posinf=1e4, neginf=-1e4)\n",
    "\n",
    "#     # stable softmax (avoid overflow)\n",
    "#     logits -= logits.max(axis=1, keepdims=True)\n",
    "#     exp = np.exp(logits)\n",
    "#     probs1 = exp[:, 1] / np.clip(exp.sum(axis=1), 1e-12, None)\n",
    "\n",
    "#     # final guards\n",
    "#     probs1 = np.nan_to_num(probs1, nan=0.5)\n",
    "#     probs1 = np.clip(probs1, 0.0, 1.0)\n",
    "\n",
    "#     # if a fold's val labels are all the same, AUC is undefined\n",
    "#     if len(np.unique(labels)) < 2:\n",
    "#         return {\"auc\": float(\"nan\")}\n",
    "\n",
    "#     return {\"auc\": roc_auc_score(labels, probs1)}\n",
    "\n",
    "# # ---------------- Custom Trainer with class-weighted CE ----------------\n",
    "# class WeightedCETrainer(Trainer):\n",
    "#     def compute_loss(self, model, inputs, return_outputs=False):\n",
    "#         labels = inputs.pop(\"labels\")\n",
    "#         outputs = model(**inputs)\n",
    "#         logits = outputs.logits.float()\n",
    "#         w = class_weights.to(logits.dtype)\n",
    "#         loss_fct = torch.nn.CrossEntropyLoss(weight=w, label_smoothing=LABEL_SMOOTH)\n",
    "#         loss = loss_fct(logits.view(-1, 2), labels.view(-1))\n",
    "#         return (loss, outputs) if return_outputs else loss\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6fee7299",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-31T04:12:36.078312Z",
     "iopub.status.busy": "2025-08-31T04:12:36.078098Z",
     "iopub.status.idle": "2025-08-31T04:12:36.097159Z",
     "shell.execute_reply": "2025-08-31T04:12:36.096460Z",
     "shell.execute_reply.started": "2025-08-31T04:12:36.078296Z"
    },
    "papermill": {
     "duration": 0.028125,
     "end_time": "2025-09-01T03:43:23.111525",
     "exception": false,
     "start_time": "2025-09-01T03:43:23.083400",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "8491228c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-01T03:43:23.169600Z",
     "iopub.status.busy": "2025-09-01T03:43:23.169382Z",
     "iopub.status.idle": "2025-09-01T03:43:23.174056Z",
     "shell.execute_reply": "2025-09-01T03:43:23.173534Z"
    },
    "papermill": {
     "duration": 0.03536,
     "end_time": "2025-09-01T03:43:23.175140",
     "exception": false,
     "start_time": "2025-09-01T03:43:23.139780",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # ------------- CV Train -------------\n",
    "# skf = StratifiedKFold(n_splits=N_FOLDS, shuffle=True, random_state=SEED)\n",
    "# oof = np.zeros(len(df), dtype=float)\n",
    "\n",
    "# for fold, (trn_idx, val_idx) in enumerate(skf.split(df, y), 1):\n",
    "#     print(f\"\\n===== Fold {fold}/{N_FOLDS} =====\")\n",
    "#     dtr = PairDataset(df.iloc[trn_idx], y[trn_idx], MAX_LEN)\n",
    "#     dvl = PairDataset(df.iloc[val_idx], y[val_idx], MAX_LEN)\n",
    "\n",
    "#     model = build_lora_model()\n",
    "\n",
    "#     args = TrainingArguments(\n",
    "#     output_dir=f\"{OUT_ROOT}/fold{fold}\",\n",
    "#     num_train_epochs=EPOCHS,\n",
    "#     per_device_train_batch_size=TRAIN_BS,\n",
    "#     gradient_accumulation_steps=GRAD_ACC,\n",
    "#     learning_rate=LR,\n",
    "#     warmup_ratio=WARMUP,\n",
    "#     weight_decay=0.01,\n",
    "#     logging_steps=50,\n",
    "#     report_to=\"none\",\n",
    "#     remove_unused_columns=False,\n",
    "#     fp16=(device==\"cuda\"),\n",
    "#     dataloader_pin_memory=False,\n",
    "#     seed=SEED,\n",
    "\n",
    "#     # ✅ required for early stopping/best-model\n",
    "#     evaluation_strategy=\"epoch\",\n",
    "#     save_strategy=\"epoch\",\n",
    "#     load_best_model_at_end=True,\n",
    "#     metric_for_best_model=\"auc\",          # matches your compute_metrics\n",
    "#     greater_is_better=True,\n",
    "#     save_total_limit=2,)\n",
    "\n",
    "#     trainer = Trainer(\n",
    "#     model=model,\n",
    "#     args=args,\n",
    "#     train_dataset=dtr,\n",
    "#     eval_dataset=dvl,                     # ✅ required so we can evaluate\n",
    "#     tokenizer=tok,\n",
    "#     data_collator=collator,\n",
    "#     compute_metrics=compute_metrics,      # your AUC function\n",
    "#     callbacks=[EarlyStoppingCallback(early_stopping_patience=2)],\n",
    "#     )\n",
    "    \n",
    "#     trainer.train()\n",
    "\n",
    "#     # save fold adapter+head and tokenizer\n",
    "#     fold_dir = f\"{OUT_ROOT}/fold{fold}\"\n",
    "#     os.makedirs(fold_dir, exist_ok=True)\n",
    "    \n",
    "#     # 🔹 Save model + tokenizer for this fold\n",
    "#     trainer.model.save_pretrained(f\"{OUT_ROOT}/fold{fold}\")\n",
    "#     tok.save_pretrained(f\"{OUT_ROOT}/fold{fold}\")\n",
    "#     print(f\"Saved fold {fold} to {OUT_ROOT}/fold{fold}\")\n",
    "\n",
    "#     # ---------- OOF AUC ----------\n",
    "#     model.eval()\n",
    "#     dl = DataLoader(dvl, batch_size=128, shuffle=False, collate_fn=collator)\n",
    "    \n",
    "#     preds = []\n",
    "#     with torch.no_grad():\n",
    "#         for batch in dl:\n",
    "#             for k in batch:\n",
    "#                 batch[k] = batch[k].to(device)\n",
    "#             logits_fp32 = model(**batch).logits.float()\n",
    "#             logits_fp32 = torch.nan_to_num(logits_fp32, nan=0.0, posinf=1e4, neginf=-1e4)\n",
    "#             prob = torch.softmax(logits_fp32, dim=1)[:, 1]\n",
    "#             prob = torch.nan_to_num(prob, nan=0.5)\n",
    "#             preds.append(prob.detach().cpu().numpy())\n",
    "\n",
    "#     prob1 = np.concatenate(preds)\n",
    "#     prob1 = np.clip(prob1, 0.0, 1.0)\n",
    "#     if np.isnan(prob1).any():\n",
    "#         prob1 = np.nan_to_num(prob1, nan=0.5)\n",
    "\n",
    "#     oof[val_idx] = prob1\n",
    "#     print(f\"Fold {fold} AUC: {roc_auc_score(y[val_idx], prob1):.4f}\")\n",
    "\n",
    "#     del trainer, model, dtr, dvl, dl, preds, prob1\n",
    "#     gc.collect()\n",
    "#     if torch.cuda.is_available(): torch.cuda.empty_cache()\n",
    "\n",
    "# print(f\"\\nOOF AUC: {roc_auc_score(y, oof):.4f}\")\n",
    "# pd.DataFrame({\"oof\": oof, \"y\": y}).to_csv(f\"{OUT_ROOT}/oof.csv\", index=False)\n",
    "# print(\"Saved folds under:\", OUT_ROOT)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "d171f944",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-01T03:43:23.232167Z",
     "iopub.status.busy": "2025-09-01T03:43:23.231958Z",
     "iopub.status.idle": "2025-09-01T03:43:23.234856Z",
     "shell.execute_reply": "2025-09-01T03:43:23.234192Z"
    },
    "papermill": {
     "duration": 0.032623,
     "end_time": "2025-09-01T03:43:23.236050",
     "exception": false,
     "start_time": "2025-09-01T03:43:23.203427",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import os, subprocess, textwrap\n",
    "# subprocess.run([\"bash\",\"-lc\",\"ls -R /kaggle/working/qwen25_ce_headonly | sed -n '1,200p'\"])\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "databundleVersionId": 13121456,
     "sourceId": 94635,
     "sourceType": "competition"
    },
    {
     "datasetId": 6365346,
     "sourceId": 10285957,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7916512,
     "sourceId": 12643252,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8141813,
     "sourceId": 12870970,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8033597,
     "sourceId": 12910937,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 3416.425969,
   "end_time": "2025-09-01T03:43:27.077450",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-09-01T02:46:30.651481",
   "version": "2.6.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "031e06eeae534e45a552ac3fc5a22350": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "07937f16eab0471a90005052c0b4166d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0a19a4689cdd4b62b1a28650cb2ab050": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "0d9d9a67d4a64fc2872799f9e592eff5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0e6ed6e96cd94462b396e53b2b8e3ba7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "119b7dc14ef24a9d86cca3fd92dd52a1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1384a0556a554856a686816905ea7ed4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_119b7dc14ef24a9d86cca3fd92dd52a1",
       "placeholder": "​",
       "style": "IPY_MODEL_5f4fae57d4a14e18b3f928a923c6eefa",
       "tabbable": null,
       "tooltip": null,
       "value": "vocab.json: "
      }
     },
     "1409118f8718410e892130b3c5787037": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "154e92cd189845089497c5adc0b94e98": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1977cc98751b40d48a10e0197e2eae59": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_154e92cd189845089497c5adc0b94e98",
       "placeholder": "​",
       "style": "IPY_MODEL_69b57a2b912647fca03a755223dc1e6d",
       "tabbable": null,
       "tooltip": null,
       "value": " 2.78M/? [00:00&lt;00:00, 37.1MB/s]"
      }
     },
     "1e27dbfd913241f38bb64639fde36b25": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9a61680e3d4e4046b02fd8260e3aba22",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_f92cb5c554334b01bd519237945bfe95",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "28dcdf9daa3b486d91e31310ea7ca37e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0d9d9a67d4a64fc2872799f9e592eff5",
       "placeholder": "​",
       "style": "IPY_MODEL_4ada96970c714c0fae3052075c4025fe",
       "tabbable": null,
       "tooltip": null,
       "value": "merges.txt: "
      }
     },
     "295c5e46cfed4ced868498f3f7833138": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "2aac04d61c2d415ca4fa12a948ea51c3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_295c5e46cfed4ced868498f3f7833138",
       "placeholder": "​",
       "style": "IPY_MODEL_6d5c629b948642edafec461df30b625b",
       "tabbable": null,
       "tooltip": null,
       "value": "tokenizer.json: "
      }
     },
     "2f14441882ac45b4b2ff38a3afee2a5c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_dfb6029d25594411b213bd566fcee95f",
        "IPY_MODEL_3d961a6a65bf405096b3b8961297d7ba",
        "IPY_MODEL_a215944175c84a598cecce451d4fa2b6"
       ],
       "layout": "IPY_MODEL_5e32d68137df494e9f1353b25fabfee0",
       "tabbable": null,
       "tooltip": null
      }
     },
     "31fc2178aebc43488bd25b6d94f144c2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "3d961a6a65bf405096b3b8961297d7ba": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_bb020c508eda4141a0665bf5f7e1e71b",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_948c6e6f0bd142a7bded1a7eed70c84c",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "408fb5171ad04f15964e66ef848a9636": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "43ea7557c8564bdfbe77a8c8a748b3db": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_7e209d9d45d842718a5c44cc5ca26be8",
       "placeholder": "​",
       "style": "IPY_MODEL_88505ad9547042568d11f0ace11001cc",
       "tabbable": null,
       "tooltip": null,
       "value": " 7.03M/? [00:00&lt;00:00, 142MB/s]"
      }
     },
     "461d32ed7e15418faf0b0206cbce7a94": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4ada96970c714c0fae3052075c4025fe": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "53640ebb8a204820a8b74a8dc8b46b31": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5a652cd0e0264b8abccdfb0a920a6870": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_31fc2178aebc43488bd25b6d94f144c2",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_c292dfd73d344be38582c1f7a59fe361",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "5e32d68137df494e9f1353b25fabfee0": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5f4fae57d4a14e18b3f928a923c6eefa": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "6997eba994b1477d986030031b0bc71a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "69b57a2b912647fca03a755223dc1e6d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "6abdffd6f5a24145a9d6d64acad899dc": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6d5c629b948642edafec461df30b625b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "700640beeaac4f2697a6b8cfea6e16c4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_96b374a449f2497ab337151e92ee170f",
       "placeholder": "​",
       "style": "IPY_MODEL_ad3e0f6667e74a86ad7621aa2569cd5d",
       "tabbable": null,
       "tooltip": null,
       "value": "config.json: 100%"
      }
     },
     "70b5417cbab44d1e8a2a4151ad8b7885": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_1384a0556a554856a686816905ea7ed4",
        "IPY_MODEL_5a652cd0e0264b8abccdfb0a920a6870",
        "IPY_MODEL_1977cc98751b40d48a10e0197e2eae59"
       ],
       "layout": "IPY_MODEL_a4aa702f4bd7417396b4a1fc3e5cad50",
       "tabbable": null,
       "tooltip": null
      }
     },
     "7cd12ea39294425c87d623d3a1d0943d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7d67bedc6e5e41e38e411ab93fb9c796": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "7e209d9d45d842718a5c44cc5ca26be8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "82f59996396749aeadee83c75618050a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ccf031171f1d4ca69ab75c8abe63ef34",
       "max": 988097824.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_e3a91f02e4c341b087018d607b8263a1",
       "tabbable": null,
       "tooltip": null,
       "value": 988097824.0
      }
     },
     "865124394c744f7fa73a8e3b9593cf10": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "88505ad9547042568d11f0ace11001cc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "8df8d82ff7534bceb0339a4f450a841d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_fbd6b20ce7354bc2b099233c400da089",
       "placeholder": "​",
       "style": "IPY_MODEL_d7c69308c3984f1e946c292f65a7d759",
       "tabbable": null,
       "tooltip": null,
       "value": " 988M/988M [00:04&lt;00:00, 463MB/s]"
      }
     },
     "9026b5788b3945de9dc3595edbdcdbe3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "940976c26efb456bbaf72dacb5d964a0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_2aac04d61c2d415ca4fa12a948ea51c3",
        "IPY_MODEL_a009c7e0ea90482d8cdc974b45b94104",
        "IPY_MODEL_43ea7557c8564bdfbe77a8c8a748b3db"
       ],
       "layout": "IPY_MODEL_53640ebb8a204820a8b74a8dc8b46b31",
       "tabbable": null,
       "tooltip": null
      }
     },
     "948c6e6f0bd142a7bded1a7eed70c84c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "96b374a449f2497ab337151e92ee170f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "99f1e6d19e9c4f9096b2490845a62be8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_28dcdf9daa3b486d91e31310ea7ca37e",
        "IPY_MODEL_1e27dbfd913241f38bb64639fde36b25",
        "IPY_MODEL_e2f69c44861f4b07ac9bfca06a0e4b19"
       ],
       "layout": "IPY_MODEL_6997eba994b1477d986030031b0bc71a",
       "tabbable": null,
       "tooltip": null
      }
     },
     "9a20c3f979574d3da65c8fa1a1c0cf72": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9a61680e3d4e4046b02fd8260e3aba22": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "a009c7e0ea90482d8cdc974b45b94104": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_a97824e8bda34a11ae714bd64a598231",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_e81e9e41039a4e7bbc4e8d497134ccf8",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "a215944175c84a598cecce451d4fa2b6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_1409118f8718410e892130b3c5787037",
       "placeholder": "​",
       "style": "IPY_MODEL_7d67bedc6e5e41e38e411ab93fb9c796",
       "tabbable": null,
       "tooltip": null,
       "value": " 7.23k/? [00:00&lt;00:00, 718kB/s]"
      }
     },
     "a38d982b04564862bf5849fe719251dd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9a20c3f979574d3da65c8fa1a1c0cf72",
       "placeholder": "​",
       "style": "IPY_MODEL_865124394c744f7fa73a8e3b9593cf10",
       "tabbable": null,
       "tooltip": null,
       "value": "model.safetensors: 100%"
      }
     },
     "a4aa702f4bd7417396b4a1fc3e5cad50": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a8a95b54fe864399a88170f64fb277f0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_a38d982b04564862bf5849fe719251dd",
        "IPY_MODEL_82f59996396749aeadee83c75618050a",
        "IPY_MODEL_8df8d82ff7534bceb0339a4f450a841d"
       ],
       "layout": "IPY_MODEL_461d32ed7e15418faf0b0206cbce7a94",
       "tabbable": null,
       "tooltip": null
      }
     },
     "a97824e8bda34a11ae714bd64a598231": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "aad156846e384f9a981ff20b16d02c20": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0e6ed6e96cd94462b396e53b2b8e3ba7",
       "placeholder": "​",
       "style": "IPY_MODEL_9026b5788b3945de9dc3595edbdcdbe3",
       "tabbable": null,
       "tooltip": null,
       "value": " 681/681 [00:00&lt;00:00, 75.0kB/s]"
      }
     },
     "ad3e0f6667e74a86ad7621aa2569cd5d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "b3b2ec57a7704c05a7215c7a2aa2b65c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_6abdffd6f5a24145a9d6d64acad899dc",
       "max": 681.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_c8e227b8ce014e46adc8d4a8df85ceb9",
       "tabbable": null,
       "tooltip": null,
       "value": 681.0
      }
     },
     "bb020c508eda4141a0665bf5f7e1e71b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "c292dfd73d344be38582c1f7a59fe361": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "c8e227b8ce014e46adc8d4a8df85ceb9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "ccf031171f1d4ca69ab75c8abe63ef34": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d7c69308c3984f1e946c292f65a7d759": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "dfb6029d25594411b213bd566fcee95f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_408fb5171ad04f15964e66ef848a9636",
       "placeholder": "​",
       "style": "IPY_MODEL_0a19a4689cdd4b62b1a28650cb2ab050",
       "tabbable": null,
       "tooltip": null,
       "value": "tokenizer_config.json: "
      }
     },
     "e28ed156f204415389226df6ed684a15": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_700640beeaac4f2697a6b8cfea6e16c4",
        "IPY_MODEL_b3b2ec57a7704c05a7215c7a2aa2b65c",
        "IPY_MODEL_aad156846e384f9a981ff20b16d02c20"
       ],
       "layout": "IPY_MODEL_7cd12ea39294425c87d623d3a1d0943d",
       "tabbable": null,
       "tooltip": null
      }
     },
     "e2f69c44861f4b07ac9bfca06a0e4b19": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_07937f16eab0471a90005052c0b4166d",
       "placeholder": "​",
       "style": "IPY_MODEL_031e06eeae534e45a552ac3fc5a22350",
       "tabbable": null,
       "tooltip": null,
       "value": " 1.67M/? [00:00&lt;00:00, 71.6MB/s]"
      }
     },
     "e3a91f02e4c341b087018d607b8263a1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "e81e9e41039a4e7bbc4e8d497134ccf8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "f92cb5c554334b01bd519237945bfe95": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "fbd6b20ce7354bc2b099233c400da089": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
