{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":94635,"databundleVersionId":13121456,"sourceType":"competition"}],"dockerImageVersionId":31090,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/shrutidceit/basic-cv-logistic-pipeline?scriptVersionId=257623751\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"### Importing libraries","metadata":{}},{"cell_type":"code","source":"import os, gc, re, textwrap\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import StratifiedKFold\n\nRANDOM_STATE = 42","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-23T04:54:18.69666Z","iopub.execute_input":"2025-08-23T04:54:18.697353Z","iopub.status.idle":"2025-08-23T04:54:18.701062Z","shell.execute_reply.started":"2025-08-23T04:54:18.697329Z","shell.execute_reply":"2025-08-23T04:54:18.700403Z"}},"outputs":[],"execution_count":5},{"cell_type":"markdown","source":"### Loading Data - train + test ","metadata":{}},{"cell_type":"code","source":"train = pd.read_csv(\"/kaggle/input/jigsaw-agile-community-rules/train.csv\")\ntest  = pd.read_csv(\"/kaggle/input/jigsaw-agile-community-rules/test.csv\")\n\nprint(train.head(2))\nprint(\"Train shape:\", train.shape)\nprint(\"Distinct rules in TRAIN:\", train['rule'].nunique())\nprint(train['rule'].value_counts())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-23T04:54:23.166827Z","iopub.execute_input":"2025-08-23T04:54:23.167107Z","iopub.status.idle":"2025-08-23T04:54:23.26591Z","shell.execute_reply.started":"2025-08-23T04:54:23.167084Z","shell.execute_reply":"2025-08-23T04:54:23.265266Z"}},"outputs":[{"name":"stdout","text":"   row_id                                               body  \\\n0       0  Banks don't want you to know this! Click here ...   \n1       1  SD Stream [ ENG Link 1] (http://www.sportsstre...   \n\n                                                rule      subreddit  \\\n0  No Advertising: Spam, referral links, unsolici...     Futurology   \n1  No Advertising: Spam, referral links, unsolici...  soccerstreams   \n\n                                  positive_example_1  \\\n0  If you could tell your younger self something ...   \n1  [I wanna kiss you all over! Stunning!](http://...   \n\n                                  positive_example_2  \\\n0  hunt for lady for jack off in neighbourhood ht...   \n1  LOLGA.COM is One of the First Professional Onl...   \n\n                                  negative_example_1  \\\n0  Watch Golden Globe Awards 2017 Live Online in ...   \n1  #Rapper \\nðŸš¨Straight Outta Cross Keys SC ðŸš¨YouTu...   \n\n                                  negative_example_2  rule_violation  \n0  DOUBLE CEE x BANDS EPPS - \"BIRDS\"\\n\\nDOWNLOAD/...               0  \n1  [15 Amazing Hidden Features Of Google Search Y...               0  \nTrain shape: (2029, 9)\nDistinct rules in TRAIN: 2\nrule\nNo legal advice: Do not offer or request legal advice.                                                     1017\nNo Advertising: Spam, referral links, unsolicited advertising, and promotional content are not allowed.    1012\nName: count, dtype: int64\n","output_type":"stream"}],"execution_count":6},{"cell_type":"markdown","source":"### Create a Stratified 5-fold cross-validation splitter","metadata":{}},{"cell_type":"code","source":"skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=RANDOM_STATE)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-23T04:54:28.92588Z","iopub.execute_input":"2025-08-23T04:54:28.92614Z","iopub.status.idle":"2025-08-23T04:54:28.929645Z","shell.execute_reply.started":"2025-08-23T04:54:28.926121Z","shell.execute_reply":"2025-08-23T04:54:28.928864Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"pipe = Pipeline([\n    (\"tfidf\", TfidfVectorizer(      # Converts body into numerical TF-IDF vectors\n        ngram_range=(1,3),          # unigrams + bigrams + trigrams\n        min_df=2,                   # ignore words that appear in fewer than 2 doc\n        max_features=200_000,       # cap features for speed/memory\n        strip_accents=\"unicode\",\n        lowercase=True,\n        sublinear_tf=True\n    )),\n    (\"clf\", LogisticRegression(     # Trains a Logistic Regression for binary classification on the TF-IDF features\n        C=4.0,                      # Controls regularization strength - bit stronger than default (1.0)\n        max_iter=300,               # Logistic regression uses an iterative solver - (optimization algorithm)max iterations allowed for convergence\n        n_jobs=-1,                   # Controls parallelization - use all CPU cores\n        random_state=RANDOM_STATE\n    ))\n])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-23T04:54:38.865318Z","iopub.execute_input":"2025-08-23T04:54:38.865876Z","iopub.status.idle":"2025-08-23T04:54:38.870206Z","shell.execute_reply.started":"2025-08-23T04:54:38.865856Z","shell.execute_reply":"2025-08-23T04:54:38.86939Z"}},"outputs":[],"execution_count":9},{"cell_type":"markdown","source":"### Create an Out-Of-Fold (OOF) prediction array.\n\n<ul>\n    <li>It will store the probability predictions for each row, but only when that row was in the validation set + not seen in training.\n    </li>\n\n</ul>\n","metadata":{}},{"cell_type":"code","source":"oof = np.zeros(len(train))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-23T04:54:41.022153Z","iopub.execute_input":"2025-08-23T04:54:41.022914Z","iopub.status.idle":"2025-08-23T04:54:41.02622Z","shell.execute_reply.started":"2025-08-23T04:54:41.022889Z","shell.execute_reply":"2025-08-23T04:54:41.025445Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"for fold, (tr_idx, va_idx) in enumerate(skf.split(train['body'], train['rule_violation']), 1):\n    tr_x = train.loc[tr_idx, 'body']\n    tr_y = train.loc[tr_idx, 'rule_violation']\n    va_x = train.loc[va_idx, 'body']\n    va_y = train.loc[va_idx, 'rule_violation']\n\n    pipe.fit(tr_x, tr_y) # Trains the pipeline (TF-IDF + Logistic Regression) on the training split\n    oof[va_idx] = pipe.predict_proba(va_x)[:,1]  # Makes probability predictions (predict_proba) on the validation split\n    auc = roc_auc_score(va_y, oof[va_idx])       # Computes AUC score for this fold\n    print(f\"Fold {fold} AUC: {auc:.4f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-23T05:08:36.49683Z","iopub.execute_input":"2025-08-23T05:08:36.497376Z","iopub.status.idle":"2025-08-23T05:08:40.316307Z","shell.execute_reply.started":"2025-08-23T05:08:36.497355Z","shell.execute_reply":"2025-08-23T05:08:40.315692Z"}},"outputs":[{"name":"stdout","text":"Fold 1 AUC: 0.8288\nFold 2 AUC: 0.7665\nFold 3 AUC: 0.8422\nFold 4 AUC: 0.8351\nFold 5 AUC: 0.7841\n","output_type":"stream"}],"execution_count":12},{"cell_type":"markdown","source":"### Getting complete roc_auc_score","metadata":{}},{"cell_type":"code","source":"print(\"OOF AUC:\", roc_auc_score(train['rule_violation'], oof))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-23T05:15:03.852451Z","iopub.execute_input":"2025-08-23T05:15:03.852938Z","iopub.status.idle":"2025-08-23T05:15:03.86067Z","shell.execute_reply.started":"2025-08-23T05:15:03.852916Z","shell.execute_reply":"2025-08-23T05:15:03.859859Z"}},"outputs":[{"name":"stdout","text":"OOF AUC: 0.8104846939271365\n","output_type":"stream"}],"execution_count":13},{"cell_type":"markdown","source":"### Fit on full train and predict test","metadata":{}},{"cell_type":"code","source":"final_pipe = Pipeline([\n    (\"tfidf\", TfidfVectorizer(\n        ngram_range=(1,3),\n        min_df=2,\n        max_features=300_000,   # slightly higher capacity for final fit\n        strip_accents=\"unicode\",\n        lowercase=True,\n        sublinear_tf=True\n    )),\n    (\"clf\", LogisticRegression(\n        C=4.0,\n        max_iter=500,\n        n_jobs=-1,\n        random_state=RANDOM_STATE\n    ))\n])\n\nfinal_pipe.fit(train['body'], train['rule_violation'])\ntest_pred = final_pipe.predict_proba(test['body'])[:, 1]  ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-23T05:20:37.183921Z","iopub.execute_input":"2025-08-23T05:20:37.184219Z","iopub.status.idle":"2025-08-23T05:20:38.439127Z","shell.execute_reply.started":"2025-08-23T05:20:37.1842Z","shell.execute_reply":"2025-08-23T05:20:38.438382Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"# Cell 5: write submission\nsub = pd.DataFrame({\n    \"row_id\": test[\"row_id\"],\n    \"rule_violation\": test_pred\n})\nsub.to_csv(\"submission.csv\", index=False)\nsub.head()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-23T05:20:46.571876Z","iopub.execute_input":"2025-08-23T05:20:46.572436Z","iopub.status.idle":"2025-08-23T05:20:46.591116Z","shell.execute_reply.started":"2025-08-23T05:20:46.572414Z","shell.execute_reply":"2025-08-23T05:20:46.59051Z"}},"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"   row_id  rule_violation\n0    2029        0.228542\n1    2030        0.474084\n2    2031        0.719045\n3    2032        0.824240\n4    2033        0.816133","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>row_id</th>\n      <th>rule_violation</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2029</td>\n      <td>0.228542</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2030</td>\n      <td>0.474084</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2031</td>\n      <td>0.719045</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2032</td>\n      <td>0.824240</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2033</td>\n      <td>0.816133</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":15}]}