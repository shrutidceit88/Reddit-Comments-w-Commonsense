{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":94635,"databundleVersionId":13121456,"sourceType":"competition"}],"dockerImageVersionId":31090,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/shrutidceit/basics-xgboost-few-shot-learning?scriptVersionId=258159281\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"### Let's list all available dataset files","metadata":{}},{"cell_type":"code","source":"import numpy as np \nimport pandas as pd\nimport os\n\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-08-25T20:58:10.176825Z","iopub.execute_input":"2025-08-25T20:58:10.177107Z","iopub.status.idle":"2025-08-25T20:58:10.182408Z","shell.execute_reply.started":"2025-08-25T20:58:10.177088Z","shell.execute_reply":"2025-08-25T20:58:10.181774Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/jigsaw-agile-community-rules/sample_submission.csv\n/kaggle/input/jigsaw-agile-community-rules/train.csv\n/kaggle/input/jigsaw-agile-community-rules/test.csv\n","output_type":"stream"}],"execution_count":27},{"cell_type":"markdown","source":"### Importing necessary library and defining configuration constants","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.pipeline import Pipeline, FeatureUnion\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom xgboost import XGBClassifier\n\nRANDOM_STATE = 42 # Sets a fixed random seed for reproducibility\nN_FOLDS = 5 # Sets the number of cross-validation folds","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-25T20:58:11.281279Z","iopub.execute_input":"2025-08-25T20:58:11.281589Z","iopub.status.idle":"2025-08-25T20:58:11.285703Z","shell.execute_reply.started":"2025-08-25T20:58:11.281569Z","shell.execute_reply":"2025-08-25T20:58:11.285139Z"}},"outputs":[],"execution_count":28},{"cell_type":"markdown","source":"### Importing ***train*** and ***test*** data","metadata":{}},{"cell_type":"code","source":"train = pd.read_csv(\"/kaggle/input/jigsaw-agile-community-rules/train.csv\")\ntest  = pd.read_csv(\"/kaggle/input/jigsaw-agile-community-rules/test.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-25T20:58:13.398612Z","iopub.execute_input":"2025-08-25T20:58:13.398897Z","iopub.status.idle":"2025-08-25T20:58:13.431709Z","shell.execute_reply.started":"2025-08-25T20:58:13.398877Z","shell.execute_reply":"2025-08-25T20:58:13.431193Z"}},"outputs":[],"execution_count":29},{"cell_type":"markdown","source":"### Checking ***train*** and ***test*** shape","metadata":{}},{"cell_type":"code","source":"print(\"Train shape:\", train.shape, \" Test shape:\", test.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-25T20:58:14.504805Z","iopub.execute_input":"2025-08-25T20:58:14.505227Z","iopub.status.idle":"2025-08-25T20:58:14.509491Z","shell.execute_reply.started":"2025-08-25T20:58:14.505203Z","shell.execute_reply":"2025-08-25T20:58:14.508713Z"}},"outputs":[{"name":"stdout","text":"Train shape: (2029, 9)  Test shape: (10, 8)\n","output_type":"stream"}],"execution_count":30},{"cell_type":"markdown","source":"### Checking if there are missing values and in which columns in train and test data","metadata":{}},{"cell_type":"code","source":"train.isna().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-25T20:58:17.416641Z","iopub.execute_input":"2025-08-25T20:58:17.417166Z","iopub.status.idle":"2025-08-25T20:58:17.424034Z","shell.execute_reply.started":"2025-08-25T20:58:17.417141Z","shell.execute_reply":"2025-08-25T20:58:17.423165Z"}},"outputs":[{"execution_count":31,"output_type":"execute_result","data":{"text/plain":"row_id                0\nbody                  0\nrule                  0\nsubreddit             0\npositive_example_1    0\npositive_example_2    0\nnegative_example_1    0\nnegative_example_2    0\nrule_violation        0\ndtype: int64"},"metadata":{}}],"execution_count":31},{"cell_type":"code","source":"test.isna().sum()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-25T20:58:17.93623Z","iopub.execute_input":"2025-08-25T20:58:17.936945Z","iopub.status.idle":"2025-08-25T20:58:17.942479Z","shell.execute_reply.started":"2025-08-25T20:58:17.93692Z","shell.execute_reply":"2025-08-25T20:58:17.941832Z"}},"outputs":[{"execution_count":32,"output_type":"execute_result","data":{"text/plain":"row_id                0\nbody                  0\nrule                  0\nsubreddit             0\npositive_example_1    0\npositive_example_2    0\nnegative_example_1    0\nnegative_example_2    0\ndtype: int64"},"metadata":{}}],"execution_count":32},{"cell_type":"markdown","source":"### Fill missing strings in ***final test*** data -  as part of defensive preprocessing step","metadata":{}},{"cell_type":"code","source":"for col in [\n    \"body\", \"rule\", \"subreddit\",\n    \"positive_example_1\", \"positive_example_2\",\n    \"negative_example_1\", \"negative_example_2\"\n]:\n    if col in test.columns:\n        test[col] = test[col].fillna(\"\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-25T20:58:21.964706Z","iopub.execute_input":"2025-08-25T20:58:21.965431Z","iopub.status.idle":"2025-08-25T20:58:21.972107Z","shell.execute_reply.started":"2025-08-25T20:58:21.965402Z","shell.execute_reply":"2025-08-25T20:58:21.971488Z"}},"outputs":[],"execution_count":33},{"cell_type":"markdown","source":"### Preparing template string for few-shot learning input formatting","metadata":{}},{"cell_type":"code","source":"FEWSHOT_TEMPLATE = \"\"\"r/{subreddit}\nRule: {rule}\n\nPositive example 1:\n{p1}\nLabel: Yes\n\nNegative example 1:\n{n1}\nLabel: No\n\nNegative example 2:\n{n2}\nLabel: No\n\nPositive example 2:\n{p2}\nLabel: Yes\n\nComment:\n{body}\n\"\"\"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-25T20:58:25.487871Z","iopub.execute_input":"2025-08-25T20:58:25.488549Z","iopub.status.idle":"2025-08-25T20:58:25.491658Z","shell.execute_reply.started":"2025-08-25T20:58:25.488524Z","shell.execute_reply":"2025-08-25T20:58:25.490991Z"}},"outputs":[],"execution_count":34},{"cell_type":"markdown","source":"### row_to_fewshot_text() converts every training/test row into a few-shot text example ","metadata":{}},{"cell_type":"code","source":"def row_to_fewshot_text(row):\n    return FEWSHOT_TEMPLATE.format(\n        subreddit=row.get(\"subreddit\",\"\"),\n        rule=row.get(\"rule\",\"\"),\n        p1=row.get(\"positive_example_1\",\"\"),\n        n1=row.get(\"negative_example_1\",\"\"),\n        n2=row.get(\"negative_example_2\",\"\"),\n        p2=row.get(\"positive_example_2\",\"\"),\n        body=row.get(\"body\",\"\"),\n    )","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-25T20:58:28.043818Z","iopub.execute_input":"2025-08-25T20:58:28.044104Z","iopub.status.idle":"2025-08-25T20:58:28.048347Z","shell.execute_reply.started":"2025-08-25T20:58:28.044084Z","shell.execute_reply":"2025-08-25T20:58:28.047638Z"}},"outputs":[],"execution_count":35},{"cell_type":"markdown","source":"### Convert the entire train/test DataFrames into prompt-ready text strings","metadata":{}},{"cell_type":"code","source":"train_text = train.apply(row_to_fewshot_text, axis=1)\ntest_text  = test.apply(row_to_fewshot_text, axis=1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-25T20:58:30.050788Z","iopub.execute_input":"2025-08-25T20:58:30.051064Z","iopub.status.idle":"2025-08-25T20:58:30.094094Z","shell.execute_reply.started":"2025-08-25T20:58:30.051045Z","shell.execute_reply":"2025-08-25T20:58:30.093299Z"}},"outputs":[],"execution_count":36},{"cell_type":"markdown","source":"### Defining rule-violation as outcome label","metadata":{}},{"cell_type":"code","source":"y = train[\"rule_violation\"].astype(int).values","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-25T20:58:32.932197Z","iopub.execute_input":"2025-08-25T20:58:32.932486Z","iopub.status.idle":"2025-08-25T20:58:32.936499Z","shell.execute_reply.started":"2025-08-25T20:58:32.932465Z","shell.execute_reply":"2025-08-25T20:58:32.935718Z"}},"outputs":[],"execution_count":37},{"cell_type":"markdown","source":"### Building a hybrid TF-IDF feature extractor\n\n<ul>\n    <li>Building features from words using Tfidf Vectorizer.</li>\n    <li>Building features from character n-grams, within word boundaries using Tfidf Vectorizer.</li>\n    <li>Concatenating outputs of multiple vectorizers into one big feature space using FeatureUnion.</li>\n</ul>","metadata":{}},{"cell_type":"code","source":"word_vect = TfidfVectorizer(\n    ngram_range=(1,2),\n    min_df=3,\n    max_features=300_000,\n    strip_accents=\"unicode\",\n    lowercase=True,\n    sublinear_tf=True,\n)\n\nchar_vect = TfidfVectorizer(\n    analyzer=\"char_wb\",           # within word boundaries\n    ngram_range=(3,5),\n    min_df=3,\n    max_features=200_000,\n    lowercase=True,\n    sublinear_tf=True,\n)\n\nvectorizer = FeatureUnion([\n    (\"w\", word_vect),\n    (\"c\", char_vect)\n])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-25T20:59:09.18458Z","iopub.execute_input":"2025-08-25T20:59:09.184864Z","iopub.status.idle":"2025-08-25T20:59:09.189615Z","shell.execute_reply.started":"2025-08-25T20:59:09.184843Z","shell.execute_reply":"2025-08-25T20:59:09.18897Z"}},"outputs":[],"execution_count":39},{"cell_type":"markdown","source":"### Compute the ratio of negatives to positives - ***scale_pos_weight parameter.***\n<ul>\n    <li> scale_pos_weight is used in XGBoost to handle imbalanced classes.</li>\n</ul>","metadata":{}},{"cell_type":"code","source":"pos = y.sum()\nneg = len(y) - pos\nscale_pos_weight = (neg / pos) if pos > 0 else 1.0\nprint(f\"Class balance: pos={pos}, neg={neg}, scale_pos_weight={scale_pos_weight:.3f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-25T20:14:37.654371Z","iopub.execute_input":"2025-08-25T20:14:37.654642Z","iopub.status.idle":"2025-08-25T20:14:37.659683Z","shell.execute_reply.started":"2025-08-25T20:14:37.654622Z","shell.execute_reply":"2025-08-25T20:14:37.658864Z"}},"outputs":[{"name":"stdout","text":"Class balance: pos=1031, neg=998, scale_pos_weight=0.968\n","output_type":"stream"}],"execution_count":9},{"cell_type":"markdown","source":"### Defining ***XGBoost model*** with hyperparameters","metadata":{}},{"cell_type":"code","source":"def build_model():\n    return XGBClassifier(\n        n_estimators=1000,   # Number of trees (boosting rounds)\n        learning_rate=0.05,  # Step size shrinkage after each boosting round\n        max_depth=8,         # Maximum depth of each decision tre\n        subsample=0.8,       # Fraction of training data sampled for each tree\n        colsample_bytree=0.6, # Fraction of features sampled per tree\n        reg_lambda=1.0,   # L2 regularization term on weights\n        reg_alpha=0.0,    # L1 regularization term on weights\n        min_child_weight=2.0,  # Minimum sum of instance weights (roughly number of samples) needed in a child node\n        objective=\"binary:logistic\",    # binary classification with probabilities as outputs\n        eval_metric=\"auc\",  # Evaluation metric used during training/validation\n        random_state=RANDOM_STATE,\n        n_jobs=-1, # Number of CPU threads to use.\n    )","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-25T21:32:02.385061Z","iopub.execute_input":"2025-08-25T21:32:02.385348Z","iopub.status.idle":"2025-08-25T21:32:02.389748Z","shell.execute_reply.started":"2025-08-25T21:32:02.385309Z","shell.execute_reply":"2025-08-25T21:32:02.389004Z"}},"outputs":[],"execution_count":40},{"cell_type":"markdown","source":"### Building a 2-step ML pipeline where:\n\n<ul>\n    <li>TF-IDF converts raw text → numeric features</li>\n    <li>XGBoost learns from those features → predicts rule violations.</li>\n</ul>","metadata":{}},{"cell_type":"code","source":"def build_pipeline():\n    return Pipeline([\n        (\"tfidf\", vectorizer),\n        (\"xgb\",   build_model())\n    ])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-25T21:32:04.66381Z","iopub.execute_input":"2025-08-25T21:32:04.664576Z","iopub.status.idle":"2025-08-25T21:32:04.668595Z","shell.execute_reply.started":"2025-08-25T21:32:04.664553Z","shell.execute_reply":"2025-08-25T21:32:04.667808Z"}},"outputs":[],"execution_count":41},{"cell_type":"markdown","source":"### Defining ***StratifiedKFold*** for balanced train/val splits for cross-validation.","metadata":{}},{"cell_type":"code","source":"skf = StratifiedKFold(n_splits=N_FOLDS, shuffle=True, random_state=RANDOM_STATE)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-25T21:36:13.393259Z","iopub.execute_input":"2025-08-25T21:36:13.393993Z","iopub.status.idle":"2025-08-25T21:36:13.39752Z","shell.execute_reply.started":"2025-08-25T21:36:13.393968Z","shell.execute_reply":"2025-08-25T21:36:13.39675Z"}},"outputs":[],"execution_count":43},{"cell_type":"markdown","source":"### Initializing ***oof*** to store predictions on validation folds","metadata":{}},{"cell_type":"code","source":"oof = np.zeros(len(train), dtype=float)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-25T21:36:14.584174Z","iopub.execute_input":"2025-08-25T21:36:14.584474Z","iopub.status.idle":"2025-08-25T21:36:14.588586Z","shell.execute_reply.started":"2025-08-25T21:36:14.58445Z","shell.execute_reply":"2025-08-25T21:36:14.587716Z"}},"outputs":[],"execution_count":44},{"cell_type":"markdown","source":"### Following ***for loop***: \n<ul>\n    <li>trains and validates the pipeline across K folds</li>\n    <li>stores out-of-fold predictions</li>\n    <li>Prints fold-wise AUC scores</li>\n</ul>         ","metadata":{}},{"cell_type":"code","source":"for fold, (tr_idx, va_idx) in enumerate(skf.split(train_text, y), 1):\n    X_tr = train_text.iloc[tr_idx]\n    y_tr = y[tr_idx]\n    X_va = train_text.iloc[va_idx]\n    y_va = y[va_idx]\n\n    pipe = build_pipeline()\n    pipe.fit(X_tr, y_tr)\n\n    oof[va_idx] = pipe.predict_proba(X_va)[:, 1]\n    auc = roc_auc_score(y_va, oof[va_idx])\n    print(f\"Fold {fold} AUC: {auc:.4f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-25T21:36:15.111244Z","iopub.execute_input":"2025-08-25T21:36:15.111497Z","iopub.status.idle":"2025-08-25T22:05:00.466546Z","shell.execute_reply.started":"2025-08-25T21:36:15.111479Z","shell.execute_reply":"2025-08-25T22:05:00.465364Z"}},"outputs":[{"name":"stdout","text":"Fold 1 AUC: 0.7138\nFold 2 AUC: 0.6705\nFold 3 AUC: 0.6706\nFold 4 AUC: 0.6793\nFold 5 AUC: 0.6825\n","output_type":"stream"}],"execution_count":45},{"cell_type":"markdown","source":"### Building final & complete pipeline with ***train and test datasets.***","metadata":{}},{"cell_type":"code","source":"final_pipe = build_pipeline()\nfinal_pipe.fit(train_text, y)\n\ntest_pred = final_pipe.predict_proba(test_text)[:, 1]\nprint(\"Test predictions ready:\", test_pred.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-25T22:05:41.720204Z","iopub.execute_input":"2025-08-25T22:05:41.720484Z","iopub.status.idle":"2025-08-25T22:13:30.088676Z","shell.execute_reply.started":"2025-08-25T22:05:41.720461Z","shell.execute_reply":"2025-08-25T22:13:30.087984Z"}},"outputs":[{"name":"stdout","text":"Test predictions ready: (10,)\n","output_type":"stream"}],"execution_count":46},{"cell_type":"code","source":"submission = pd.DataFrame({\n    \"row_id\": test[\"row_id\"],\n    \"rule_violation\": test_pred\n})\nsubmission.to_csv(\"submission.csv\", index=False)\nsubmission.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-25T22:13:30.089733Z","iopub.execute_input":"2025-08-25T22:13:30.089953Z","iopub.status.idle":"2025-08-25T22:13:30.109752Z","shell.execute_reply.started":"2025-08-25T22:13:30.089936Z","shell.execute_reply":"2025-08-25T22:13:30.109205Z"}},"outputs":[{"execution_count":47,"output_type":"execute_result","data":{"text/plain":"   row_id  rule_violation\n0    2029        0.007172\n1    2030        0.015737\n2    2031        0.976505\n3    2032        0.992494\n4    2033        0.990357","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>row_id</th>\n      <th>rule_violation</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2029</td>\n      <td>0.007172</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2030</td>\n      <td>0.015737</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2031</td>\n      <td>0.976505</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2032</td>\n      <td>0.992494</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2033</td>\n      <td>0.990357</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":47}]}