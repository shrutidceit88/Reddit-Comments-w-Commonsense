{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":94635,"databundleVersionId":13121456,"isSourceIdPinned":false,"sourceType":"competition"},{"sourceId":258601733,"sourceType":"kernelVersion"}],"dockerImageVersionId":31089,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# ===== Qwen2.5-0.5B cross-encoder â€” inference (average 5 folds) =====\nimport os, gc, warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport numpy as np\nimport pandas as pd\nimport torch\nfrom torch.utils.data import Dataset, DataLoader\n\nfrom transformers import AutoTokenizer, AutoModelForSequenceClassification, DataCollatorWithPadding\n\n# --------- Paths (match training) ---------\nDATA_DIR  = \"/kaggle/input/jigsaw-agile-community-rules\"\nTEST_CSV  = f\"{DATA_DIR}/test.csv\"\n\nOUT_ROOT  = \"/kaggle/input/basic-qwen2-7b/submission.csv\"   # where training saved fold*/ weights\n\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\nMAX_LEN = 256\nBATCH   = 128\n\n# --------- Build paired inputs (same as training) ---------\ndef _clip(x):\n    x = \"\" if pd.isna(x) else str(x).strip()\n    return x if 0 < len(x) < 300 else \"\"\n\ndef build_text_a(row):\n    sub  = str(row[\"subreddit\"])\n    rule = str(row[\"rule\"])\n    pos1 = _clip(row.get(\"positive_example_1\",\"\"))\n    neg1 = _clip(row.get(\"negative_example_1\",\"\"))\n    parts = [f\"r/{sub}\", f\"Rule: {rule}\"]\n    if pos1: parts.append(f\"Yes: {pos1}\")\n    if neg1: parts.append(f\"No: {neg1}\")\n    return \" | \".join(parts)\n\ndef prepare_df(df):\n    df = df.copy()\n    df[\"text_a\"] = df.apply(build_text_a, axis=1)\n    df[\"text_b\"] = df[\"body\"].astype(str)\n    return df\n\ndf_test = pd.read_csv(TEST_CSV)\ndf_test = prepare_df(df_test)\n\n# --------- Load tokenizer (from fold1 to be safe) ---------\nfold_dirs = sorted([os.path.join(OUT_ROOT, d) for d in os.listdir(OUT_ROOT) if d.startswith(\"fold\")])\nassert len(fold_dirs) > 0, f\"No fold folders found in {OUT_ROOT}. Train first.\"\n\ntok = AutoTokenizer.from_pretrained(fold_dirs[0], use_fast=True, trust_remote_code=True)\nif tok.pad_token is None:\n    if tok.eos_token is None:\n        tok.add_special_tokens({\"eos_token\":\"</s>\"})\n    tok.pad_token = tok.eos_token\ntok.padding_side = \"right\"\n\ncollator = DataCollatorWithPadding(tokenizer=tok)\n\n# --------- Dataset ---------\nclass PairDataset(Dataset):\n    def __init__(self, df, max_len=256):\n        self.a = df[\"text_a\"].tolist()\n        self.b = df[\"text_b\"].tolist()\n        self.max_len = max_len\n    def __len__(self): return len(self.a)\n    def __getitem__(self, i):\n        return tok(self.a[i], self.b[i], truncation=True, max_length=self.max_len)\n\nds_test = PairDataset(df_test, MAX_LEN)\ndl_test = DataLoader(ds_test, batch_size=BATCH, shuffle=False, collate_fn=collator)\n\n# --------- Predict with each fold and average ---------\nall_fold_probs = []\n\nfor fd in fold_dirs:\n    print(\"Loading fold:\", fd)\n    model = AutoModelForSequenceClassification.from_pretrained(\n        fd,\n        trust_remote_code=True,\n        torch_dtype=torch.float16 if device==\"cuda\" else torch.float32,\n    ).to(device)\n    model.eval()\n\n    probs = []\n    with torch.no_grad():\n        for batch in dl_test:\n            for k in batch:\n                batch[k] = batch[k].to(device)\n            logits = model(**batch).logits.float()                # safe dtype\n            logits = torch.nan_to_num(logits, nan=0.0, posinf=1e4, neginf=-1e4)\n            p1 = torch.softmax(logits, dim=1)[:, 1]\n            p1 = torch.nan_to_num(p1, nan=0.5)\n            probs.append(p1.detach().cpu().numpy())\n    probs = np.concatenate(probs)\n    probs = np.clip(probs, 0.0, 1.0)\n    all_fold_probs.append(probs)\n\n    del model, probs\n    gc.collect()\n    if torch.cuda.is_available(): torch.cuda.empty_cache()\n\n# --------- Average folds & write submission ---------\npred = np.mean(np.stack(all_fold_probs, axis=0), axis=0)\nsubmission = pd.DataFrame({\"row_id\": df_test[\"row_id\"], \"rule_violation\": pred.astype(float)})\nsubmission.to_csv(\"submission.csv\", index=False)\nprint(\"Saved submission.csv with shape:\", submission.shape)\nsubmission.head()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-29T02:30:45.667095Z","iopub.execute_input":"2025-08-29T02:30:45.667263Z","iopub.status.idle":"2025-08-29T02:31:21.257767Z","shell.execute_reply.started":"2025-08-29T02:30:45.667247Z","shell.execute_reply":"2025-08-29T02:31:21.256657Z"}},"outputs":[{"name":"stderr","text":"2025-08-29 02:31:04.886552: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1756434665.243187      36 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1756434665.347653      36 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNotADirectoryError\u001b[0m                        Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_36/2761891558.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     45\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     46\u001b[0m \u001b[0;31m# --------- Load tokenizer (from fold1 to be safe) ---------\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 47\u001b[0;31m \u001b[0mfold_dirs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msorted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mOUT_ROOT\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0md\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0md\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlistdir\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mOUT_ROOT\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0md\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstartswith\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"fold\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     48\u001b[0m \u001b[0;32massert\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfold_dirs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34mf\"No fold folders found in {OUT_ROOT}. Train first.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     49\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNotADirectoryError\u001b[0m: [Errno 20] Not a directory: '/kaggle/input/basic-qwen2-7b/submission.csv'"],"ename":"NotADirectoryError","evalue":"[Errno 20] Not a directory: '/kaggle/input/basic-qwen2-7b/submission.csv'","output_type":"error"}],"execution_count":1},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}